"use strict";var WORLD_SIDE_SIZE=7,WINDOW_HEIGHT=window.innerHeight,WINDOW_WIDTH=window.innerWidth,ROAD_COLORS=[16711680,16746496,16776960,65280,65535,255,16711935],NUMBER_COLORS=ROAD_COLORS.length,WORLD_HEIGHT=1e3,WORLD_WIDTH=100,CAR_SIZE_X=10,CAR_SIZE_Y=10,CAR_SIZE_Z=10,Player=function(){function e(e){e=e||event,R[e.which]="keydown"===e.type}var t=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),r=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),a=r,n=function(){var e=(new THREE.TextureLoader).load("/assets/object-textures/player.jpg"),a=new THREE.BoxGeometry(CAR_SIZE_X,CAR_SIZE_Y,CAR_SIZE_Z),n=new THREE.MeshBasicMaterial({map:e}),o=new THREE.Mesh(a,n);return o.position.y=a.parameters.height/2,r.position.y=CAR_SIZE_Y,r.position.z=4*CAR_SIZE_Z,o.add(t),o.add(r),o}(),o={movement:{arrows:{up:38,down:40,left:37,right:39},wasd:{up:87,down:83,left:65,right:68}},switchCamera:67,reset:8},i=o.movement.arrows,E=.5,I=.03,R={};return document.addEventListener("keydown",e,!1),document.addEventListener("keyup",e,!1),{doMovementLoop:function(){R[i.up]&&n.translateZ(-E),R[i.left]&&n.rotateY(I),R[i.right]&&n.rotateY(-I),R[i.down]&&n.translateZ(E),R[o.switchCamera]&&(a=a===t?r:t,R[o.switchCamera]=!1),R[o.reset]&&(n.rotation.y=0,n.position.set(0,n.position.y,0))},playerObject:n,getCamera:function(){return a}}}(),NotMarioKart=function(){function e(){for(var e=new THREE.PlaneGeometry(WORLD_WIDTH,WORLD_HEIGHT,WORLD_SIDE_SIZE,1),t=[],a=0;a<NUMBER_COLORS;a++)t.push(new THREE.MeshBasicMaterial({color:ROAD_COLORS[a],side:THREE.DoubleSide}));for(var n=e.faces.length/2,o=0;o<n;o++){var i=2*o;e.faces[i].materialIndex=(o+Math.floor(o/WORLD_SIDE_SIZE))%NUMBER_COLORS,e.faces[i+1].materialIndex=(o+Math.floor(o/WORLD_SIDE_SIZE))%NUMBER_COLORS}var E=new THREE.Mesh(e,t);E.rotateX(-Math.PI/2),E.position.y=0,r.add(E)}function t(){requestAnimationFrame(t),a.clear(),a.setViewport(0,0,WINDOW_WIDTH,WINDOW_HEIGHT),a.render(r,Player.getCamera()),a.setViewport(WINDOW_WIDTH-200,50,150,150),n.position.z=Player.playerObject.position.z,a.render(r,n),Player.doMovementLoop()}var r=new THREE.Scene,a=new THREE.WebGLRenderer,n=new THREE.OrthographicCamera(-WORLD_HEIGHT/2,WORLD_HEIGHT/2,WORLD_HEIGHT/2,-WORLD_HEIGHT/2,400,550);return{init:function(){a.setSize(WINDOW_WIDTH,WINDOW_HEIGHT),a.setPixelRatio(window.devicePixelRatio),a.domElement.style.position="relative",document.body.appendChild(a.domElement),a.autoClear=!1,n.position.y=500,n.rotation.x=-90*Math.PI/180,e(),r.add(Player.playerObject),t()}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
