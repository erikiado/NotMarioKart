"use strict";var WORLD_SIDE_SIZE=7,WINDOW_HEIGHT=window.innerHeight,WINDOW_WIDTH=window.innerWidth,ROAD_COLORS=[16711680,16746496,16776960,65280,65535,255,16711935],NUMBER_COLORS=ROAD_COLORS.length,WORLD_HEIGHT=1e3,WORLD_WIDTH=100,TOP_CAMERA_DIST=50,CAR_SIZE_X=10,CAR_SIZE_Y=10,CAR_SIZE_Z=10,MINICAM_FACTOR=1.5,BOX_SIZE=10,CHECK_SIZE=100,Physics=function(){var e=-1,t=new THREE.Vector3(0,-TOP_CAMERA_DIST,0),o=new THREE.Vector3(0,1,0),n=new THREE.Raycaster;return{gravity:function(i,r){t.x=i.position.x,t.z=i.position.z,n.set(t,o),(!n.intersectObject(r,!0).length||i.position.y<0)&&(i.position.y+=e)},detectCollision:function(e,t){for(var o=(new THREE.Box3).setFromObject(e),n=0;n<t.length;n++)if(o.intersectsBox(t[n].boundingBox))return!0;return!1},checkPoints:function(e,t){for(var o=(new THREE.Box3).setFromObject(e),n=0;n<t.length;n++)if(o.intersectsBox(t[n].boundingBox))return n;return-1}}}(),Checkpoint=function(e,t,o){var n=new THREE.BoxGeometry(CHECK_SIZE,BOX_SIZE,CHECK_SIZE),i=new THREE.MeshBasicMaterial({color:16777215,wireframe:!0});this.mesh=new THREE.Mesh(n,i),this.mesh.position.x=e,this.mesh.position.y=t,this.mesh.position.z=o,this.boundingBox=(new THREE.Box3).setFromObject(this.mesh)},Box=function(e,t,o){var n=new THREE.BoxGeometry(BOX_SIZE,BOX_SIZE,BOX_SIZE),i=new THREE.MeshBasicMaterial({color:11176004});this.mesh=new THREE.Mesh(n,i),this.mesh.position.x=e,this.mesh.position.y=t,this.mesh.position.z=o,this.boundingBox=(new THREE.Box3).setFromObject(this.mesh)},Player=function(){function e(e){e=e||event,d[e.which]="keydown"===e.type}var t=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),o=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),n=o,i=function(){var e=(new THREE.ObjectLoader).parse(playerCar);return t.position.y=2*e.scale.y,t.position.z=4*e.scale.z,t.rotateY(180*Math.PI/180),o.position.y=10*e.scale.y,o.position.z=-20*e.scale.z,o.rotateY(180*Math.PI/180),e.add(t),e.add(o),e}(),r={movement:{arrows:{up:38,down:40,left:37,right:39},wasd:{up:87,down:83,left:65,right:68}},switchCamera:67,reset:8},a=r.movement.arrows,s=0,E=5,c=.05,l=.05,d={};return document.addEventListener("keydown",e,!1),document.addEventListener("keyup",e,!1),{doMovementLoop:function(){d[a.up]&&s<E&&(s+=c),d[a.left]&&i.rotateY(l),d[a.right]&&i.rotateY(-l),d[a.down]&&s>0&&(s-=c,s=Math.max(0,s)),i.translateZ(s),d[r.switchCamera]&&(n=n===t?o:t,d[r.switchCamera]=!1),d[r.reset]&&(i.rotation.x=0,i.position.set(0,i.position.x,0),i.rotation.y=0,i.position.set(0,i.position.y,0),i.rotation.z=0,i.position.set(0,i.position.z,0),s=0)},playerObject:i,getCamera:function(){return n},playerId:null,crash:function(){s=0}}}(),NotMarioKart=function(){function e(){(l=io({transports:["websocket"],upgrade:!1})).on("all-players",function(e){console.log("[all-players]",e),e.forEach(function(e){var o=e.position,n=e.rotation,i=t();T[e.id]={position:o,rotation:n,car:i},i.position.set(o.x,o.y,o.z),i.rotation.set(n.x,n.y,n.z),d.add(i)}),0==e.length&&(i(),l.emit("send-boxes",y))}),l.on("player-joined",function(e){toastr.success("player "+e.id+" has joined."),console.log("[player-joined]",e);var o=e.position,n=e.rotation,i=t();T[e.id]={position:o,rotation:n,car:i},i.position.set(o.x,o.y,o.z),i.rotation.set(n.x,n.y,n.z),d.add(i)}),l.on("receive-boxes",function(e){y=e,r()}),l.on("player-left",function(e){toastr.error("Player "+e+" has left."),console.log("[player-left]",e);var t=T[e].car;d.remove(t),delete T[e]}),l.on("update-player",function(e){console.log("[update-player]",e);var t=e.id,o=e.position,n=e.rotation,i=T[t];i.car.position.set(o.x,o.y,o.z),i.car.rotation.set(n.x,n.y,n.z)}),l.on("start-countdown",function(e){toastr.info(e+" seconds before the race starts."),console.log("[start-countdown]",e)}),l.on("start",function(){toastr.info("The race has started."),console.log("[start]")}),l.on("finished",function(e){toastr.info("You finished."),console.log("[finished]",e)}),l.on("stop",function(e){toaster.info("The race is over."),console.log("[stop]",stop),e.forEach(function(e){e.name})}),window.setInterval(function(){var e=Player.playerObject;l.emit("update-player",{position:{x:e.position.x,y:e.position.y,z:e.position.z},rotation:{x:e.rotation._x,y:e.rotation._y,z:e.rotation._z}})},40)}function t(){return(new THREE.ObjectLoader).parse(playerCar)}function o(){var e=new THREE.CatmullRomCurve3([new THREE.Vector3(0,0,0),new THREE.Vector3(0,500,0),new THREE.Vector3(-200,500,0),new THREE.Vector3(-200,800,0),new THREE.Vector3(600,800,0),new THREE.Vector3(600,500,0),new THREE.Vector3(300,500,0),new THREE.Vector3(300,0,0),new THREE.Vector3(800,0,0),new THREE.Vector3(800,-500,0),new THREE.Vector3(0,-500,0)]);e.closed=!0;for(var t={steps:100,extrudePath:e},o=new THREE.Shape([new THREE.Vector2(2*CAR_SIZE_Y,0),new THREE.Vector2(0,5*CAR_SIZE_X),new THREE.Vector2(0,-5*CAR_SIZE_X)]),n=new THREE.ExtrudeGeometry(o,t),i=[],r=0;r<NUMBER_COLORS;r++)i.push(new THREE.MeshBasicMaterial({color:ROAD_COLORS[r],side:THREE.DoubleSide}));for(var a=n.faces.length/2,s=0;s<a;s++){var c=2*s;n.faces[c].materialIndex=(s+Math.floor(s/WORLD_SIDE_SIZE))%NUMBER_COLORS,n.faces[c+1].materialIndex=(s+Math.floor(s/WORLD_SIDE_SIZE))%NUMBER_COLORS}(E=new THREE.Mesh(n,i)).rotateX(-Math.PI/2),E.position.y=0,d.add(E)}function n(){for(var e=[new THREE.Vector3(0,0,0),new THREE.Vector3(300,0,580),new THREE.Vector3(250,0,-200),new THREE.Vector3(200,0,-870),new THREE.Vector3(0,0,-500)],t=0;t<e.length;t++){var o=new Checkpoint(e[t].x,BOX_SIZE/2,e[t].z);d.updateMatrixWorld(),u.push(o),d.add(o.mesh)}}function i(){for(var e=0;e<1e3;e++){var t=new Box(Math.floor(4001*Math.random()-2e3),BOX_SIZE/2,Math.floor(4001*Math.random()-2e3));d.updateMatrixWorld(),Physics.gravity(t.mesh,E),t.mesh.position.y==BOX_SIZE/2&&(I.push(t),y.push({x:t.mesh.position.x,z:t.mesh.position.z}),d.add(t.mesh))}}function r(){for(var e=0;e<y.length;e++){var t=new Box(y[e].x,BOX_SIZE/2,y[e].z);d.updateMatrixWorld(),Physics.gravity(t.mesh,E),t.mesh.position.y==BOX_SIZE/2&&(I.push(t),d.add(t.mesh))}}function a(){c==_+1&&(_=c),0==c&&4==_&&(_=c,H+=1,l.emit("player-lap",H))}function s(){requestAnimationFrame(s),p.clear(),p.setViewport(0,0,WINDOW_WIDTH,WINDOW_HEIGHT),p.render(d,Player.getCamera()),h.clear(),h.setViewport(0,0,WINDOW_WIDTH/4,WINDOW_HEIGHT/4),h.render(d,R),Player.doMovementLoop(),Physics.detectCollision(Player.playerObject,I)&&Player.crash(),-1!=(c=Physics.checkPoints(Player.playerObject,u))&&(w%10==0&&a(),w+=1,w%=10),R.position.z=Player.playerObject.position.z,Physics.gravity(Player.playerObject,E)}var E,c,l,d=new THREE.Scene,p=new THREE.WebGLRenderer,h=new THREE.WebGLRenderer,R=new THREE.OrthographicCamera(-WINDOW_WIDTH/MINICAM_FACTOR,WINDOW_WIDTH/MINICAM_FACTOR,WINDOW_HEIGHT/MINICAM_FACTOR,-WINDOW_HEIGHT/MINICAM_FACTOR,TOP_CAMERA_DIST-50,TOP_CAMERA_DIST+50),I=[],u=[],T={},y=[],H=0,w=0,_=0;return{init:function(){p.setSize(WINDOW_WIDTH,WINDOW_HEIGHT),p.setPixelRatio(window.devicePixelRatio),p.domElement.style.position="fixed",document.body.appendChild(p.domElement),p.autoClear=!1,h.setSize(WINDOW_WIDTH/4,WINDOW_HEIGHT/4),h.setPixelRatio(window.devicePixelRatio),h.domElement.style.position="fixed",h.domElement.style.top="5%",h.domElement.style.left="70%",h.domElement.style.zIndex="2",h.domElement.style.outline="white solid",document.body.appendChild(h.domElement),h.autoClear=!1,R.position.y=TOP_CAMERA_DIST,R.rotation.x=-90*Math.PI/180,o(),n(),d.add(Player.playerObject),e(),s()}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
