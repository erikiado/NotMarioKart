"use strict";var WORLD_SIDE_SIZE=7,WINDOW_HEIGHT=window.innerHeight,WINDOW_WIDTH=window.innerWidth,ROAD_COLORS=[16711680,16746496,16776960,65280,65535,255,16711935],NUMBER_COLORS=ROAD_COLORS.length,WORLD_HEIGHT=1e3,WORLD_WIDTH=100,TOP_CAMERA_DIST=50,CAR_SIZE_X=10,CAR_SIZE_Y=10,CAR_SIZE_Z=10,MINICAM_FACTOR=1.5,BOX_SIZE=10,CHECK_SIZE=100,Physics=function(){var e=-1,o=new THREE.Vector3(0,-TOP_CAMERA_DIST,0),t=new THREE.Vector3(0,1,0),n=new THREE.Raycaster;return{gravity:function(i,r){o.x=i.position.x,o.z=i.position.z,n.set(o,t),(!n.intersectObject(r,!0).length||i.position.y<0)&&(i.position.y+=e)},detectCollision:function(e,o){for(var t=(new THREE.Box3).setFromObject(e),n=0;n<o.length;n++)if(t.intersectsBox(o[n].boundingBox))return!0;return!1}}}(),Checkpoint=function(e,o,t){var n=new THREE.BoxGeometry(CHECK_SIZE,BOX_SIZE,CHECK_SIZE),i=new THREE.MeshBasicMaterial({color:16777215,wireframe:!0});this.mesh=new THREE.Mesh(n,i),this.mesh.position.x=e,this.mesh.position.y=o,this.mesh.position.z=t,this.boundingBox=(new THREE.Box3).setFromObject(this.mesh)},Box=function(e,o,t){var n=new THREE.BoxGeometry(BOX_SIZE,BOX_SIZE,BOX_SIZE),i=new THREE.MeshBasicMaterial({color:11176004});this.mesh=new THREE.Mesh(n,i),this.mesh.position.x=e,this.mesh.position.y=o,this.mesh.position.z=t,this.boundingBox=(new THREE.Box3).setFromObject(this.mesh)},Player=function(){function e(e){e=e||event,d[e.which]="keydown"===e.type}var o=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),t=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),n=t,i=function(){var e=(new THREE.ObjectLoader).parse(playerCar);return o.position.y=2*e.scale.y,o.position.z=4*e.scale.z,o.rotateY(180*Math.PI/180),t.position.y=10*e.scale.y,t.position.z=-20*e.scale.z,t.rotateY(180*Math.PI/180),e.add(o),e.add(t),e}(),r={movement:{arrows:{up:38,down:40,left:37,right:39},wasd:{up:87,down:83,left:65,right:68}},switchCamera:67,reset:8},a=r.movement.arrows,s=0,E=5,c=.05,l=.05,d={};return document.addEventListener("keydown",e,!1),document.addEventListener("keyup",e,!1),{doMovementLoop:function(){d[a.up]&&s<E&&(s+=c),d[a.left]&&i.rotateY(l),d[a.right]&&i.rotateY(-l),d[a.down]&&s>0&&(s-=c,s=Math.max(0,s)),i.translateZ(s),d[r.switchCamera]&&(n=n===o?t:o,d[r.switchCamera]=!1),d[r.reset]&&(i.rotation.x=0,i.position.set(0,i.position.x,0),i.rotation.y=0,i.position.set(0,i.position.y,0),i.rotation.z=0,i.position.set(0,i.position.z,0))},playerObject:i,getCamera:function(){return n},playerId:null,crash:function(){s=0}}}(),NotMarioKart=function(){function e(){var e=io({transports:["websocket"],upgrade:!1});e.on("all-players",function(t){console.log("[all-players]",t),t.forEach(function(e){var t=e.position,n=e.rotation,i=o();R[e.id]={position:t,rotation:n,car:i},i.position.set(t.x,t.y,t.z),i.rotation.set(n.x,n.y,n.z),E.add(i)}),console.log(t),0==t.length&&(i(),e.emit("send-boxes",I))}),e.on("player-joined",function(e){toastr.success("player "+e.id+" has joined."),console.log("[player-joined]",e);var t=e.position,n=e.rotation,i=o();R[e.id]={position:t,rotation:n,car:i},i.position.set(t.x,t.y,t.z),i.rotation.set(n.x,n.y,n.z),E.add(i)}),e.on("receive-boxes",function(e){I=e,r()}),e.on("player-left",function(e){toastr.error("Player "+e+" has left."),console.log("[player-left]",e);var o=R[e].car;E.remove(o),delete R[e]}),e.on("update-player",function(e){console.log("[update-player]",e);var o=e.id,t=e.position,n=e.rotation,i=R[o];i.car.position.set(t.x,t.y,t.z),i.car.rotation.set(n.x,n.y,n.z)}),e.on("start-countdown",function(e){toastr.info(e+" seconds before the race starts."),console.log("[start-countdown]",e)}),e.on("start",function(){toastr.info("The race has started."),console.log("[start]")}),e.on("finished",function(e){toastr.info("You finished."),console.log("[finished]",e)}),e.on("stop",function(e){toaster.info("The race is over."),console.log("[stop]",stop),e.forEach(function(e){e.name})}),window.setInterval(function(){var o=Player.playerObject;e.emit("update-player",{position:{x:o.position.x,y:o.position.y,z:o.position.z},rotation:{x:o.rotation._x,y:o.rotation._y,z:o.rotation._z}})},40)}function o(){return(new THREE.ObjectLoader).parse(playerCar)}function t(){var e=new THREE.CatmullRomCurve3([new THREE.Vector3(0,0,0),new THREE.Vector3(0,500,0),new THREE.Vector3(-200,500,0),new THREE.Vector3(-200,800,0),new THREE.Vector3(600,800,0),new THREE.Vector3(600,500,0),new THREE.Vector3(300,500,0),new THREE.Vector3(300,0,0),new THREE.Vector3(800,0,0),new THREE.Vector3(800,-500,0),new THREE.Vector3(0,-500,0)]);e.closed=!0;for(var o={steps:100,extrudePath:e},t=new THREE.Shape([new THREE.Vector2(2*CAR_SIZE_Y,0),new THREE.Vector2(0,5*CAR_SIZE_X),new THREE.Vector2(0,-5*CAR_SIZE_X)]),n=new THREE.ExtrudeGeometry(t,o),i=[],r=0;r<NUMBER_COLORS;r++)i.push(new THREE.MeshBasicMaterial({color:ROAD_COLORS[r],side:THREE.DoubleSide}));for(var a=n.faces.length/2,c=0;c<a;c++){var l=2*c;n.faces[l].materialIndex=(c+Math.floor(c/WORLD_SIDE_SIZE))%NUMBER_COLORS,n.faces[l+1].materialIndex=(c+Math.floor(c/WORLD_SIDE_SIZE))%NUMBER_COLORS}(s=new THREE.Mesh(n,i)).rotateX(-Math.PI/2),s.position.y=0,E.add(s)}function n(){for(var e=[new THREE.Vector3(0,0,0),new THREE.Vector3(300,0,580),new THREE.Vector3(250,0,-200),new THREE.Vector3(200,0,-870),new THREE.Vector3(0,0,-500)],o=0;o<e.length;o++){var t=new Checkpoint(e[o].x,BOX_SIZE/2,e[o].z);E.updateMatrixWorld(),h.push(t),E.add(t.mesh)}}function i(){for(var e=0;e<1e3;e++){var o=new Box(Math.floor(4001*Math.random()-2e3),BOX_SIZE/2,Math.floor(4001*Math.random()-2e3));E.updateMatrixWorld(),Physics.gravity(o.mesh,s),o.mesh.position.y==BOX_SIZE/2&&(p.push(o),I.push({x:o.mesh.position.x,z:o.mesh.position.z}),E.add(o.mesh))}}function r(){for(var e=0;e<I.length;e++){var o=new Box(I[e].x,BOX_SIZE/2,I[e].z);E.updateMatrixWorld(),Physics.gravity(o.mesh,s),o.mesh.position.y==BOX_SIZE/2&&(p.push(o),E.add(o.mesh))}}function a(){requestAnimationFrame(a),c.clear(),c.setViewport(0,0,WINDOW_WIDTH,WINDOW_HEIGHT),c.render(E,Player.getCamera()),l.clear(),l.setViewport(0,0,WINDOW_WIDTH/4,WINDOW_HEIGHT/4),l.render(E,d),Player.doMovementLoop(),Physics.detectCollision(Player.playerObject,p)&&Player.crash(),d.position.z=Player.playerObject.position.z,Physics.gravity(Player.playerObject,s)}var s,E=new THREE.Scene,c=new THREE.WebGLRenderer,l=new THREE.WebGLRenderer,d=new THREE.OrthographicCamera(-WINDOW_WIDTH/MINICAM_FACTOR,WINDOW_WIDTH/MINICAM_FACTOR,WINDOW_HEIGHT/MINICAM_FACTOR,-WINDOW_HEIGHT/MINICAM_FACTOR,TOP_CAMERA_DIST-50,TOP_CAMERA_DIST+50),p=[],h=[],R={},I=[];return{init:function(){c.setSize(WINDOW_WIDTH,WINDOW_HEIGHT),c.setPixelRatio(window.devicePixelRatio),c.domElement.style.position="fixed",document.body.appendChild(c.domElement),c.autoClear=!1,l.setSize(WINDOW_WIDTH/4,WINDOW_HEIGHT/4),l.setPixelRatio(window.devicePixelRatio),l.domElement.style.position="fixed",l.domElement.style.top="5%",l.domElement.style.left="70%",l.domElement.style.zIndex="2",l.domElement.style.outline="white solid",document.body.appendChild(l.domElement),l.autoClear=!1,d.position.y=TOP_CAMERA_DIST,d.rotation.x=-90*Math.PI/180,t(),n(),E.add(Player.playerObject),e(),a()}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
