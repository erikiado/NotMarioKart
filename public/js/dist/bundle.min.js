"use strict";var WORLD_SIDE_SIZE=7,WINDOW_HEIGHT=window.innerHeight,WINDOW_WIDTH=window.innerWidth,ROAD_COLORS=[16711680,16746496,16776960,65280,65535,255,16711935],NUMBER_COLORS=ROAD_COLORS.length,WORLD_HEIGHT=1e3,WORLD_WIDTH=100,TOP_CAMERA_DIST=50,CAR_SIZE_X=10,CAR_SIZE_Y=10,CAR_SIZE_Z=10,MINICAM_FACTOR=1.5,BOX_SIZE=10,CHECK_SIZE=100,Physics=function(){var e=-1,o=new THREE.Vector3(0,-TOP_CAMERA_DIST,0),t=new THREE.Vector3(0,1,0),n=new THREE.Raycaster;return{gravity:function(i,r){o.x=i.position.x,o.z=i.position.z,n.set(o,t),(!n.intersectObject(r,!0).length||i.position.y<0)&&(i.position.y+=e)},detectCollision:function(e,o){for(var t=(new THREE.Box3).setFromObject(e),n=0;n<o.length;n++)if(t.intersectsBox(o[n].boundingBox))return!0;return!1},checkPoints:function(e,o){for(var t=(new THREE.Box3).setFromObject(e),n=0;n<o.length;n++)if(t.intersectsBox(o[n].boundingBox))return n;return-1}}}(),Checkpoint=function(e,o,t){var n=new THREE.BoxGeometry(CHECK_SIZE,BOX_SIZE,CHECK_SIZE),i=new THREE.MeshBasicMaterial({color:16777215,wireframe:!0});this.mesh=new THREE.Mesh(n,i),this.mesh.position.x=e,this.mesh.position.y=o,this.mesh.position.z=t,this.boundingBox=(new THREE.Box3).setFromObject(this.mesh)},Box=function(e,o,t){var n=new THREE.BoxGeometry(BOX_SIZE,BOX_SIZE,BOX_SIZE),i=new THREE.MeshBasicMaterial({color:11176004});this.mesh=new THREE.Mesh(n,i),this.mesh.position.x=e,this.mesh.position.y=o,this.mesh.position.z=t,this.boundingBox=(new THREE.Box3).setFromObject(this.mesh)},Player=function(){function e(e){e=e||event,d[e.which]="keydown"===e.type}var o=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),t=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),n=t,i=function(){var e=(new THREE.ObjectLoader).parse(playerCar);return o.position.y=2*e.scale.y,o.position.z=4*e.scale.z,o.rotateY(180*Math.PI/180),t.position.y=10*e.scale.y,t.position.z=-20*e.scale.z,t.rotateY(180*Math.PI/180),e.add(o),e.add(t),e}(),r={movement:{arrows:{up:38,down:40,left:37,right:39},wasd:{up:87,down:83,left:65,right:68}},switchCamera:67,reset:8},a=r.movement.arrows,s=0,c=5,E=.05,l=.05,d={};return document.addEventListener("keydown",e,!1),document.addEventListener("keyup",e,!1),{doMovementLoop:function(){d[a.up]&&s<c&&(s+=E),d[a.left]&&i.rotateY(l),d[a.right]&&i.rotateY(-l),d[a.down]&&s>0&&(s-=E,s=Math.max(0,s)),i.translateZ(s),d[r.switchCamera]&&(n=n===o?t:o,d[r.switchCamera]=!1),d[r.reset]&&(i.rotation.x=0,i.position.set(0,i.position.x,0),i.rotation.y=0,i.position.set(0,i.position.y,0),i.rotation.z=0,i.position.set(0,i.position.z,0))},playerObject:i,getCamera:function(){return n},playerId:null,crash:function(){s=0},toggleMovements:function(e){movementsLocked=e}}}(),NotMarioKart=function(){function e(){var e=io({transports:["websocket"],upgrade:!1}),t=picoModal({content:'Please enter a name: <input id="playerName"/><br/><button id="playerNameBtn">Start!</button>',closeButton:!1,overlayClose:!1}).show();$("#playerNameBtn").on("click",function(){if(e.emit("player-name",$("#playerName").val()),t.close(),console.log(R.length),0===Object.values(R).length)picoModal({content:"Waiting for other players...",closeButton:!1,overlayClose:!1}).show()}),e.on("all-players",function(t){console.log("[all-players]",t),t.forEach(function(e){var t=e.position,n=e.rotation,i=o();R[e.id]={position:t,rotation:n,car:i},i.position.set(t.x,t.y,t.z),i.rotation.set(n.x,n.y,n.z),l.add(i)}),console.log(t),0==t.length&&(i(),e.emit("send-boxes",I))}),e.on("player-joined",function(e){toastr.success("player "+e.id+" has joined."),console.log("[player-joined]",e);var t=e.position,n=e.rotation,i=o();R[e.id]={position:t,rotation:n,car:i},i.position.set(t.x,t.y,t.z),i.rotation.set(n.x,n.y,n.z),l.add(i)}),e.on("receive-boxes",function(e){I=e,r()}),e.on("player-left",function(e){toastr.error("Player "+e+" has left."),console.log("[player-left]",e);var o=R[e].car;l.remove(o),delete R[e]}),e.on("update-player",function(e){console.log("[update-player]",e);var o=e.id,t=e.position,n=e.rotation,i=R[o];i.car.position.set(t.x,t.y,t.z),i.car.rotation.set(n.x,n.y,n.z)}),e.on("start-countdown",function(e){toastr.info(e+" seconds before the race starts."),console.log("[start-countdown]",e)}),e.on("start",function(){toastr.info("The race has started."),console.log("[start]")}),e.on("finished",function(e){toastr.info("You finished."),console.log("[finished]",e)}),e.on("stop",function(e){toaster.info("The race is over."),console.log("[stop]",stop),e.forEach(function(e){e.name})}),window.setInterval(function(){var o=Player.playerObject;e.emit("update-player",{position:{x:o.position.x,y:o.position.y,z:o.position.z},rotation:{x:o.rotation._x,y:o.rotation._y,z:o.rotation._z}})},40)}function o(){return(new THREE.ObjectLoader).parse(playerCar)}function t(){var e=new THREE.CatmullRomCurve3([new THREE.Vector3(0,0,0),new THREE.Vector3(0,500,0),new THREE.Vector3(-200,500,0),new THREE.Vector3(-200,800,0),new THREE.Vector3(600,800,0),new THREE.Vector3(600,500,0),new THREE.Vector3(300,500,0),new THREE.Vector3(300,0,0),new THREE.Vector3(800,0,0),new THREE.Vector3(800,-500,0),new THREE.Vector3(0,-500,0)]);e.closed=!0;for(var o={steps:100,extrudePath:e},t=new THREE.Shape([new THREE.Vector2(2*CAR_SIZE_Y,0),new THREE.Vector2(0,5*CAR_SIZE_X),new THREE.Vector2(0,-5*CAR_SIZE_X)]),n=new THREE.ExtrudeGeometry(t,o),i=[],r=0;r<NUMBER_COLORS;r++)i.push(new THREE.MeshBasicMaterial({color:ROAD_COLORS[r],side:THREE.DoubleSide}));for(var a=n.faces.length/2,s=0;s<a;s++){var E=2*s;n.faces[E].materialIndex=(s+Math.floor(s/WORLD_SIDE_SIZE))%NUMBER_COLORS,n.faces[E+1].materialIndex=(s+Math.floor(s/WORLD_SIDE_SIZE))%NUMBER_COLORS}(c=new THREE.Mesh(n,i)).rotateX(-Math.PI/2),c.position.y=0,l.add(c)}function n(){for(var e=[new THREE.Vector3(0,0,0),new THREE.Vector3(300,0,580),new THREE.Vector3(250,0,-200),new THREE.Vector3(200,0,-870),new THREE.Vector3(0,0,-500)],o=0;o<e.length;o++){var t=new Checkpoint(e[o].x,BOX_SIZE/2,e[o].z);l.updateMatrixWorld(),y.push(t),l.add(t.mesh)}}function i(){for(var e=0;e<1e3;e++){var o=new Box(Math.floor(4001*Math.random()-2e3),BOX_SIZE/2,Math.floor(4001*Math.random()-2e3));l.updateMatrixWorld(),Physics.gravity(o.mesh,c),o.mesh.position.y==BOX_SIZE/2&&(u.push(o),I.push({x:o.mesh.position.x,z:o.mesh.position.z}),l.add(o.mesh))}}function r(){for(var e=0;e<I.length;e++){var o=new Box(I[e].x,BOX_SIZE/2,I[e].z);l.updateMatrixWorld(),Physics.gravity(o.mesh,c),o.mesh.position.y==BOX_SIZE/2&&(u.push(o),l.add(o.mesh))}}function a(){E==H+1&&(H=E),0==E&&4==H&&(H=E,m+=1)}function s(){requestAnimationFrame(s),d.clear(),d.setViewport(0,0,WINDOW_WIDTH,WINDOW_HEIGHT),d.render(l,Player.getCamera()),p.clear(),p.setViewport(0,0,WINDOW_WIDTH/4,WINDOW_HEIGHT/4),p.render(l,h),Player.doMovementLoop(),Physics.detectCollision(Player.playerObject,u)&&Player.crash(),-1!=(E=Physics.checkPoints(Player.playerObject,y))&&(T%10==0&&a(),T+=1,T%=10),h.position.z=Player.playerObject.position.z,Physics.gravity(Player.playerObject,c)}var c,E,l=new THREE.Scene,d=new THREE.WebGLRenderer,p=new THREE.WebGLRenderer,h=new THREE.OrthographicCamera(-WINDOW_WIDTH/MINICAM_FACTOR,WINDOW_WIDTH/MINICAM_FACTOR,WINDOW_HEIGHT/MINICAM_FACTOR,-WINDOW_HEIGHT/MINICAM_FACTOR,TOP_CAMERA_DIST-50,TOP_CAMERA_DIST+50),u=[],y=[],R={},I=[],m=0,T=0,H=0;return{init:function(){d.setSize(WINDOW_WIDTH,WINDOW_HEIGHT),d.setPixelRatio(window.devicePixelRatio),d.domElement.style.position="fixed",document.body.appendChild(d.domElement),d.autoClear=!1,p.setSize(WINDOW_WIDTH/4,WINDOW_HEIGHT/4),p.setPixelRatio(window.devicePixelRatio),p.domElement.style.position="fixed",p.domElement.style.top="5%",p.domElement.style.left="70%",p.domElement.style.zIndex="2",p.domElement.style.outline="white solid",document.body.appendChild(p.domElement),p.autoClear=!1,h.position.y=TOP_CAMERA_DIST,h.rotation.x=-90*Math.PI/180,t(),n(),l.add(Player.playerObject),e(),s()}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy5qcyIsIlBoeXNpY3MuanMiLCJDaGVja3BvaW50LmpzIiwiQm94LmpzIiwiUGxheWVyLmpzIiwiTm90TWFyaW9LYXJ0LmpzIl0sIm5hbWVzIjpbIldPUkxEX1NJREVfU0laRSIsIldJTkRPV19IRUlHSFQiLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsIldJTkRPV19XSURUSCIsImlubmVyV2lkdGgiLCJST0FEX0NPTE9SUyIsIk5VTUJFUl9DT0xPUlMiLCJsZW5ndGgiLCJXT1JMRF9IRUlHSFQiLCJXT1JMRF9XSURUSCIsIlRPUF9DQU1FUkFfRElTVCIsIkNBUl9TSVpFX1giLCJDQVJfU0laRV9ZIiwiQ0FSX1NJWkVfWiIsIk1JTklDQU1fRkFDVE9SIiwiQk9YX1NJWkUiLCJDSEVDS19TSVpFIiwiUGh5c2ljcyIsImciLCJoZWxsIiwiVEhSRUUiLCJWZWN0b3IzIiwib25lRGlyZWN0aW9uIiwicmF5Y2FzdGVyIiwiUmF5Y2FzdGVyIiwiZ3Jhdml0eSIsIm9iamVjdCIsImZsb29yIiwieCIsInBvc2l0aW9uIiwieiIsInNldCIsImludGVyc2VjdE9iamVjdCIsInkiLCJkZXRlY3RDb2xsaXNpb24iLCJjYXIiLCJvYmplY3RzIiwiY2FyQm94IiwiQm94MyIsInNldEZyb21PYmplY3QiLCJpIiwiaW50ZXJzZWN0c0JveCIsImJvdW5kaW5nQm94IiwiY2hlY2tQb2ludHMiLCJDaGVja3BvaW50IiwiZ2VvbWV0cnkiLCJCb3hHZW9tZXRyeSIsIm1hdGVyaWFsIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJjb2xvciIsIndpcmVmcmFtZSIsInRoaXMiLCJtZXNoIiwiTWVzaCIsIkJveCIsIlBsYXllciIsIm9uS2V5TW92ZSIsImUiLCJldmVudCIsImtleUNvZGVNYXAiLCJ3aGljaCIsInR5cGUiLCJwb3ZDYW1lcmEiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsInRyYWNraW5nQ2FtZXJhIiwiY3VycmVudENhbWVyYSIsInBsYXllck9iamVjdCIsIk9iamVjdExvYWRlciIsInBhcnNlIiwicGxheWVyQ2FyIiwic2NhbGUiLCJyb3RhdGVZIiwiTWF0aCIsIlBJIiwiYWRkIiwibWFrZVBsYXllck9iamVjdCIsImNvbnRyb2xzIiwibW92ZW1lbnQiLCJhcnJvd3MiLCJ1cCIsImRvd24iLCJsZWZ0IiwicmlnaHQiLCJ3YXNkIiwic3dpdGNoQ2FtZXJhIiwicmVzZXQiLCJlbmFibGVkQ29udHJvbHMiLCJzcGVlZCIsIm1heFNwZWVkIiwiYWNjZWxlcmF0aW9uIiwicm90YXRpb25TcGVlZCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImRvTW92ZW1lbnRMb29wIiwibWF4IiwidHJhbnNsYXRlWiIsInJvdGF0aW9uIiwiZ2V0Q2FtZXJhIiwicGxheWVySWQiLCJjcmFzaCIsInRvZ2dsZU1vdmVtZW50cyIsImlzTG9ja2VkIiwibW92ZW1lbnRzTG9ja2VkIiwiTm90TWFyaW9LYXJ0IiwiaW5pdFNvY2tldEV2ZW50Iiwic29ja2V0IiwiaW8iLCJ0cmFuc3BvcnRzIiwidXBncmFkZSIsIm1vZGFsIiwicGljb01vZGFsIiwiY29udGVudCIsImNsb3NlQnV0dG9uIiwib3ZlcmxheUNsb3NlIiwic2hvdyIsIiQiLCJvbiIsImVtaXQiLCJ2YWwiLCJjbG9zZSIsImNvbnNvbGUiLCJsb2ciLCJwbGF5ZXJzIiwiT2JqZWN0IiwidmFsdWVzIiwiZGF0YSIsImZvckVhY2giLCJwbGF5ZXIiLCJwb3MiLCJyb3QiLCJtYWtlQ2FyT2JqZWN0IiwiaWQiLCJzY2VuZSIsImFkZEJveGVzIiwiYm94ZXMiLCJ0b2FzdHIiLCJzdWNjZXNzIiwiYm94cyIsImFkZEJveGVzUG9zaXRpb24iLCJlcnJvciIsInJlbW92ZSIsInAiLCJzZWNvbmRzIiwiaW5mbyIsInRpbWUiLCJ0b2FzdGVyIiwic3RvcCIsIm5hbWUiLCJzZXRJbnRlcnZhbCIsIl94IiwiX3kiLCJfeiIsImJ1aWxkRmxvb3IiLCJjdXJ2ZSIsIkNhdG11bGxSb21DdXJ2ZTMiLCJjbG9zZWQiLCJleHRydWRlU2V0dGluZ3MiLCJzdGVwcyIsImV4dHJ1ZGVQYXRoIiwic2hhcGUiLCJTaGFwZSIsIlZlY3RvcjIiLCJFeHRydWRlR2VvbWV0cnkiLCJtYXRlcmlhbHMiLCJwdXNoIiwic2lkZSIsIkRvdWJsZVNpZGUiLCJnZW9GYWNlc0xlbmd0aCIsImZhY2VzIiwiaiIsIm1hdGVyaWFsSW5kZXgiLCJyb3RhdGVYIiwiYWRkQ2hlY2twb2ludHMiLCJjdXJ2ZVBvaW50cyIsImNoZWNrIiwidXBkYXRlTWF0cml4V29ybGQiLCJjaGVja3BvaW50cyIsImJveCIsInJhbmRvbSIsImNoZWNrTGFwIiwiY3VycmVudENoZWNrcG9pbnQiLCJsYXN0Q2hlY2twb2ludCIsImxhcCIsImxvb3AiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZW5kZXJlciIsImNsZWFyIiwic2V0Vmlld3BvcnQiLCJyZW5kZXIiLCJtaW5pTWFwUmVuZGVyZXIiLCJtaW5pTWFwQ2FtZXJhIiwiY2hlY2tMYXBDb3VudCIsIlNjZW5lIiwiV2ViR0xSZW5kZXJlciIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsImluaXQiLCJzZXRTaXplIiwic2V0UGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJkb21FbGVtZW50Iiwic3R5bGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJhdXRvQ2xlYXIiLCJ0b3AiLCJ6SW5kZXgiLCJvdXRsaW5lIl0sIm1hcHBpbmdzIjoiYUFJQSxJQUFNQSxnQkFBa0IsRUFDbEJDLGNBQWdCQyxPQUFPQyxZQUN2QkMsYUFBZUYsT0FBT0csV0FDdEJDLGFBQ0YsU0FDQSxTQUNBLFNBQ0EsTUFDQSxNQUNBLElBQ0EsVUFFRUMsY0FBZ0JELFlBQVlFLE9BQzVCQyxhQUFlLElBQ2ZDLFlBQWMsSUFDZEMsZ0JBQWtCLEdBQ2xCQyxXQUFhLEdBQ2JDLFdBQWEsR0FDYkMsV0FBYSxHQUNiQyxlQUFpQixJQUNqQkMsU0FBVyxHQUNYQyxXQUFhLElDckJiQyxRQUFXLFdBRWIsSUFBTUMsR0FBSyxFQUNQQyxFQUFPLElBQUlDLE1BQU1DLFFBQVEsR0FBSVgsZ0JB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M0ssU0FBVyxRQUNyQzhELFNBQVM4RyxLQUFLQyxZQUFZakIsRUFBU2MsWUFDbkNkLEVBQVNrQixXQUFZLEVBRXJCZCxFQUFnQk8sUUFBUWpNLGFBQWUsRUFBR0gsY0FBZ0IsR0FDMUQ2TCxFQUFnQlEsY0FBY3BNLE9BQU9xTSxrQkFDckNULEVBQWdCVSxXQUFXQyxNQUFNM0ssU0FBVyxRQUM1Q2dLLEVBQWdCVSxXQUFXQyxNQUFNSSxJQUFNLEtBQ3ZDZixFQUFnQlUsV0FBV0MsTUFBTXZILEtBQU8sTUFDeEM0RyxFQUFnQlUsV0FBV0MsTUFBTUssT0FBUyxJQUMxQ2hCLEVBQWdCVSxXQUFXQyxNQUFNTSxRQUFVLGNBQzNDbkgsU0FBUzhHLEtBQUtDLFlBQVliLEVBQWdCVSxZQUMxQ1YsRUFBZ0JjLFdBQVksRUFFNUJiLEVBQWNqSyxTQUFTSSxFQUFJdkIsZ0JBQzNCb0wsRUFBYzlGLFNBQVNwRSxHQUFLLEdBQUs0QyxLQUFLQyxHQUFLLElBRTNDK0UsSUFFQW9CLElBRUF4QyxFQUFNMUQsSUFBSW5CLE9BQU9XLGNBQ2pCc0MsSUFDQStFLE1BdFVjIiwiZmlsZSI6ImJ1bmRsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQWxsIGNvbnN0YW50cywgYXZhaWxhYmxlIGluIGdsb2JhbCB3aW5kb3cuXHJcbiAqL1xyXG5cclxuY29uc3QgV09STERfU0lERV9TSVpFID0gNztcclxuY29uc3QgV0lORE9XX0hFSUdIVCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuY29uc3QgV0lORE9XX1dJRFRIID0gd2luZG93LmlubmVyV2lkdGg7XHJcbmNvbnN0IFJPQURfQ09MT1JTID0gW1xyXG4gICAgMHhmZjAwMDAsXHJcbiAgICAweGZmODgwMCxcclxuICAgIDB4ZmZmZjAwLFxyXG4gICAgMHgwMGZmMDAsXHJcbiAgICAweDAwZmZmZixcclxuICAgIDB4MDAwMGZmLFxyXG4gICAgMHhmZjAwZmZcclxuXTtcclxuY29uc3QgTlVNQkVSX0NPTE9SUyA9IFJPQURfQ09MT1JTLmxlbmd0aDtcclxuY29uc3QgV09STERfSEVJR0hUID0gMTAwMDtcclxuY29uc3QgV09STERfV0lEVEggPSAxMDA7XHJcbmNvbnN0IFRPUF9DQU1FUkFfRElTVCA9IDUwO1xyXG5jb25zdCBDQVJfU0laRV9YID0gMTA7XHJcbmNvbnN0IENBUl9TSVpFX1kgPSAxMDtcclxuY29uc3QgQ0FSX1NJWkVfWiA9IDEwO1xyXG5jb25zdCBNSU5JQ0FNX0ZBQ1RPUiA9IDEuNTtcclxuY29uc3QgQk9YX1NJWkUgPSAxMDtcclxuY29uc3QgQ0hFQ0tfU0laRSA9IDEwMDtcclxuIiwiLyoqXHJcbiAqIFBoeXNpY3MgXCJlbmdpbmVcIiBmb3IgdGhlIGdhbWUuXHJcbiAqIE5vdFBoeXNpanMgZm9yIE5vdE1hcmlvS2FydC5cclxuICovXHJcbmNvbnN0IFBoeXNpY3MgPSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgY29uc3QgZyA9IC0xO1xyXG4gICAgbGV0IGhlbGwgPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAtVE9QX0NBTUVSQV9ESVNULCAwKTtcclxuICAgIGxldCBvbmVEaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAxLCAwKTtcclxuICAgIGxldCByYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gZ3Jhdml0eShvYmplY3QsIGZsb29yKSB7XHJcbiAgICAgICAgLy8gVXBkYXRlIHJheWNhc3RlciB3aXRoIGFuIG9yaWdpbiBiZWxvdyB0aGUgb2JqZWN0LlxyXG4gICAgICAgIGhlbGwueCA9IG9iamVjdC5wb3NpdGlvbi54O1xyXG4gICAgICAgIGhlbGwueiA9IG9iamVjdC5wb3NpdGlvbi56O1xyXG4gICAgICAgIHJheWNhc3Rlci5zZXQoaGVsbCwgb25lRGlyZWN0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gVHJ5IHRvIGludGVyc2VjdCB3aXRoIGZsb29yLlxyXG4gICAgICAgIGxldCBpbnRlcnNlY3RzID0gcmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdChmbG9vciwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKCFpbnRlcnNlY3RzLmxlbmd0aCB8fCBvYmplY3QucG9zaXRpb24ueSA8IDApIHtcclxuICAgICAgICAgICAgb2JqZWN0LnBvc2l0aW9uLnkgKz0gZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGV0ZWN0Q29sbGlzaW9uKGNhciwgb2JqZWN0cykge1xyXG4gICAgICAgIGxldCBjYXJCb3ggPSBuZXcgVEhSRUUuQm94MygpLnNldEZyb21PYmplY3QoY2FyKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGNhckJveC5pbnRlcnNlY3RzQm94KG9iamVjdHNbaV0uYm91bmRpbmdCb3gpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2hlY2tQb2ludHMoY2FyLCBvYmplY3RzKSB7XHJcbiAgICAgICAgbGV0IGNhckJveCA9IG5ldyBUSFJFRS5Cb3gzKCkuc2V0RnJvbU9iamVjdChjYXIpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoY2FyQm94LmludGVyc2VjdHNCb3gob2JqZWN0c1tpXS5ib3VuZGluZ0JveCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdyYXZpdHk6IGdyYXZpdHksXHJcbiAgICAgICAgZGV0ZWN0Q29sbGlzaW9uOiBkZXRlY3RDb2xsaXNpb24sXHJcbiAgICAgICAgY2hlY2tQb2ludHM6IGNoZWNrUG9pbnRzXHJcbiAgICB9O1xyXG59KSgpO1xyXG4iLCIvKipcclxuICogQm94ZXMgcmVwcmVzZW50aW5nIG9ic3RhY2xlcy5cclxuICovXHJcbmNvbnN0IENoZWNrcG9pbnQgPSAoZnVuY3Rpb24oeCwgeSwgeikge1xyXG4gICAgbGV0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KCBDSEVDS19TSVpFLCBCT1hfU0laRSwgQ0hFQ0tfU0laRSApO1xyXG4gICAgbGV0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7Y29sb3I6IDB4ZmZmZmZmLCB3aXJlZnJhbWU6dHJ1ZX0gKTtcclxuICAgIHRoaXMubWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ID0geDtcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID0geTtcclxuICAgIHRoaXMubWVzaC5wb3NpdGlvbi56ID0gejtcclxuICAgIHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94MygpLnNldEZyb21PYmplY3QodGhpcy5tZXNoKTtcclxufSk7XHJcbiIsIi8qKlxyXG4gKiBCb3hlcyByZXByZXNlbnRpbmcgb2JzdGFjbGVzLlxyXG4gKi9cclxuY29uc3QgQm94ID0gKGZ1bmN0aW9uKHgsIHksIHopIHtcclxuICAgIGxldCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSggQk9YX1NJWkUsIEJPWF9TSVpFLCBCT1hfU0laRSApO1xyXG4gICAgbGV0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7Y29sb3I6IDB4YWE4ODQ0fSApO1xyXG4gICAgdGhpcy5tZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xyXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSB4O1xyXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPSB5O1xyXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnogPSB6O1xyXG4gICAgdGhpcy5ib3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKCkuc2V0RnJvbU9iamVjdCh0aGlzLm1lc2gpO1xyXG59KTtcclxuIiwiLyoqXHJcbiAqIEV2ZXJ5dGhpbmcgYWJvdXQgdGhlIFBsYXllciBvYmplY3QsIGl0cyBjYW1lcmEsIHRoZSBtb3ZlbWVudHMgLi4uXHJcbiAqL1xyXG5cclxuY29uc3QgUGxheWVyID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgcG92Q2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKFxyXG4gICAgICAgIDc1LFxyXG4gICAgICAgIFdJTkRPV19XSURUSCAvIFdJTkRPV19IRUlHSFQsXHJcbiAgICAgICAgMC4xLFxyXG4gICAgICAgIDEwMDBcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgdHJhY2tpbmdDYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXHJcbiAgICAgICAgNzUsXHJcbiAgICAgICAgV0lORE9XX1dJRFRIIC8gV0lORE9XX0hFSUdIVCxcclxuICAgICAgICAwLjEsXHJcbiAgICAgICAgMTAwMFxyXG4gICAgKTtcclxuXHJcbiAgICBsZXQgY3VycmVudENhbWVyYSA9IHRyYWNraW5nQ2FtZXJhO1xyXG4gICAgbGV0IGdldENhbWVyYSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50Q2FtZXJhO1xyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgbW92ZW1lbnRMb2NrZWQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0IHBsYXllck9iamVjdCA9IG1ha2VQbGF5ZXJPYmplY3QoKTtcclxuICAgIHZhciBwbGF5ZXJJZCA9IG51bGw7XHJcblxyXG4gICAgY29uc3QgY29udHJvbHMgPSB7XHJcbiAgICAgICAgbW92ZW1lbnQ6IHtcclxuICAgICAgICAgICAgYXJyb3dzOiB7XHJcbiAgICAgICAgICAgICAgICB1cDogMzgsXHJcbiAgICAgICAgICAgICAgICBkb3duOiA0MCxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IDM3LFxyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDM5XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdhc2Q6IHtcclxuICAgICAgICAgICAgICAgIHVwOiA4NyxcclxuICAgICAgICAgICAgICAgIGRvd246IDgzLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogNjUsXHJcbiAgICAgICAgICAgICAgICByaWdodDogNjhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3dpdGNoQ2FtZXJhOiA2NyxcclxuICAgICAgICByZXNldDogOFxyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgZW5hYmxlZENvbnRyb2xzID0gY29udHJvbHMubW92ZW1lbnQuYXJyb3dzO1xyXG5cclxuICAgIGxldCBzcGVlZCA9IDA7XHJcbiAgICBsZXQgbWF4U3BlZWQgPSA1O1xyXG4gICAgY29uc3QgYWNjZWxlcmF0aW9uID0gMC4wNTtcclxuICAgIGNvbnN0IHJvdGF0aW9uU3BlZWQgPSAwLjA1O1xyXG5cclxuICAgIGNvbnN0IGtleUNvZGVNYXAgPSB7fTtcclxuXHJcbiAgICBmdW5jdGlvbiBvbktleU1vdmUoZSkge1xyXG4gICAgICAgIGUgPSBlIHx8IGV2ZW50OyAvLyBGb3IgSUUuXHJcbiAgICAgICAga2V5Q29kZU1hcFtlLndoaWNoXSA9IGUudHlwZSA9PT0gJ2tleWRvd24nO1xyXG4gICAgfVxyXG5cclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleU1vdmUsIGZhbHNlKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgb25LZXlNb3ZlLCBmYWxzZSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZG9Nb3ZlbWVudExvb3AoKSB7XHJcbiAgICAgICAgaWYgKGtleUNvZGVNYXBbZW5hYmxlZENvbnRyb2xzLnVwXSkge1xyXG4gICAgICAgICAgICBpZiAoc3BlZWQgPCBtYXhTcGVlZCkge1xyXG4gICAgICAgICAgICAgICAgc3BlZWQgKz0gYWNjZWxlcmF0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChrZXlDb2RlTWFwW2VuYWJsZWRDb250cm9scy5sZWZ0XSkge1xyXG4gICAgICAgICAgICBwbGF5ZXJPYmplY3Qucm90YXRlWShyb3RhdGlvblNwZWVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGtleUNvZGVNYXBbZW5hYmxlZENvbnRyb2xzLnJpZ2h0XSkge1xyXG4gICAgICAgICAgICBwbGF5ZXJPYmplY3Qucm90YXRlWSgtcm90YXRpb25TcGVlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChrZXlDb2RlTWFwW2VuYWJsZWRDb250cm9scy5kb3duXSkge1xyXG4gICAgICAgICAgICBpZiAoc3BlZWQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzcGVlZCAtPSBhY2NlbGVyYXRpb247XHJcbiAgICAgICAgICAgICAgICBzcGVlZCA9IE1hdGgubWF4KDAsIHNwZWVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwbGF5ZXJPYmplY3QudHJhbnNsYXRlWihzcGVlZCk7XHJcbiAgICAgICAgaWYgKGtleUNvZGVNYXBbY29udHJvbHMuc3dpdGNoQ2FtZXJhXSkge1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudENhbWVyYSA9PT0gcG92Q2FtZXJhKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2FtZXJhID0gdHJhY2tpbmdDYW1lcmE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2FtZXJhID0gcG92Q2FtZXJhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGtleUNvZGVNYXBbY29udHJvbHMuc3dpdGNoQ2FtZXJhXSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoa2V5Q29kZU1hcFtjb250cm9scy5yZXNldF0pIHtcclxuICAgICAgICAgICAgcGxheWVyT2JqZWN0LnJvdGF0aW9uLnggPSAwO1xyXG4gICAgICAgICAgICBwbGF5ZXJPYmplY3QucG9zaXRpb24uc2V0KDAsIHBsYXllck9iamVjdC5wb3NpdGlvbi54LCAwKTtcclxuICAgICAgICAgICAgcGxheWVyT2JqZWN0LnJvdGF0aW9uLnkgPSAwO1xyXG4gICAgICAgICAgICBwbGF5ZXJPYmplY3QucG9zaXRpb24uc2V0KDAsIHBsYXllck9iamVjdC5wb3NpdGlvbi55LCAwKTtcclxuICAgICAgICAgICAgcGxheWVyT2JqZWN0LnJvdGF0aW9uLnogPSAwO1xyXG4gICAgICAgICAgICBwbGF5ZXJPYmplY3QucG9zaXRpb24uc2V0KDAsIHBsYXllck9iamVjdC5wb3NpdGlvbi56LCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3Jhc2goKSB7XHJcbiAgICAgICAgLy8gYWNjZWxlcmF0aW9uID0gMDtcclxuICAgICAgICBzcGVlZCA9IDA7XHJcbiAgICAgICAgLy8gaWYgKGtleUNvZGVNYXBbZW5hYmxlZENvbnRyb2xzLnVwXSkge1xyXG4gICAgICAgIC8vICAgICBwbGF5ZXJPYmplY3QudHJhbnNsYXRlWigtc3BlZWQpO1xyXG4gICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgIHBsYXllck9iamVjdC50cmFuc2xhdGVaKHNwZWVkKTtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vIGZvciAodmFyIGkgPSBncm91cEJsb2Nrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIC8vIGxldCBwb3MgPSBncm91cEJsb2Nrc1tpXS5wb3NpdGlvbjtcclxuICAgICAgICAvLyAgICAgbGV0IHBvID0gcGxheWVyT2JqZWN0LmNoaWxkcmVuWzJdLmNoaWxkcmVuWzBdXHJcbiAgICAgICAgLy8gZm9yICh2YXIgdmVydGV4SW5kZXggPSAwOyB2ZXJ0ZXhJbmRleCA8IHBvLmdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDsgdmVydGV4SW5kZXgrKylcclxuICAgICAgICAvLyB7XHJcbiAgICAgICAgLy8gICAgIHZhciBsb2NhbFZlcnRleCA9IHBvLmdlb21ldHJ5LnZlcnRpY2VzW3ZlcnRleEluZGV4XS5jbG9uZSgpO1xyXG4gICAgICAgIC8vICAgICB2YXIgZ2xvYmFsVmVydGV4ID0gbG9jYWxWZXJ0ZXguYXBwbHlNYXRyaXhwbGF5ZXJPYmplY3QubWF0cml4Lm11bHRpcGx5VmVjdG9yMygpO1xyXG4gICAgICAgIC8vICAgICB2YXIgZGlyZWN0aW9uVmVjdG9yID0gZ2xvYmFsVmVydGV4LnN1YlNlbGYoIHBvLnBvc2l0aW9uICk7XHJcblxyXG4gICAgICAgIC8vICAgICB2YXIgcmF5ID0gbmV3IFRIUkVFLlJheSggcG8ucG9zaXRpb24sIGRpcmVjdGlvblZlY3Rvci5jbG9uZSgpLm5vcm1hbGl6ZSgpICk7XHJcbiAgICAgICAgLy8gICAgIHZhciBjb2xsaXNpb25SZXN1bHRzID0gcmF5LmludGVyc2VjdE9iamVjdHMoIGdyb3VwQmxvY2tzICk7XHJcbiAgICAgICAgLy8gICAgIGlmICggY29sbGlzaW9uUmVzdWx0cy5sZW5ndGggPiAwICYmIGNvbGxpc2lvblJlc3VsdHNbMF0uZGlzdGFuY2UgPCBkaXJlY3Rpb25WZWN0b3IubGVuZ3RoKCkgKVxyXG4gICAgICAgIC8vICAgICB7XHJcbiAgICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZygncGVyZGlzdHJlJylcclxuICAgICAgICAvLyAgICAgICAgIC8vIGEgY29sbGlzaW9uIG9jY3VycmVkLi4uIGRvIHNvbWV0aGluZy4uLlxyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIGlmKChwbGF5ZXJPYmplY3QucG9zaXRpb24ueCs1IDwgcG9zLnggJiYgcGxheWVyT2JqZWN0LnBvc2l0aW9uLnorNSA8IHBvcy56KXx8IChwbGF5ZXJPYmplY3QucG9zaXRpb24ueC01ID4gcG9zLnggJiYgcGxheWVyT2JqZWN0LnBvc2l0aW9uLnorNSA+IHBvcy56KSlcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhncm91cEJsb2Nrc1tpXSlcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFrZVBsYXllck9iamVjdCgpIHtcclxuICAgICAgICBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuT2JqZWN0TG9hZGVyKCk7XHJcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0gbG9hZGVyLnBhcnNlKHBsYXllckNhcik7XHJcblxyXG4gICAgICAgIHBvdkNhbWVyYS5wb3NpdGlvbi55ID0gb2JqZWN0LnNjYWxlLnkgKiAyO1xyXG4gICAgICAgIHBvdkNhbWVyYS5wb3NpdGlvbi56ID0gb2JqZWN0LnNjYWxlLnogKiA0O1xyXG4gICAgICAgIC8vIHRyYWNraW5nQ2FtZXJhLnJvdGF0ZVgoMCAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgICAgIHBvdkNhbWVyYS5yb3RhdGVZKDE4MCAqIE1hdGguUEkgLyAxODApO1xyXG5cclxuICAgICAgICB0cmFja2luZ0NhbWVyYS5wb3NpdGlvbi55ID0gb2JqZWN0LnNjYWxlLnkgKiAxMDtcclxuICAgICAgICB0cmFja2luZ0NhbWVyYS5wb3NpdGlvbi56ID0gb2JqZWN0LnNjYWxlLnogKiAtMjA7XHJcbiAgICAgICAgLy8gdHJhY2tpbmdDYW1lcmEucm90YXRlWCgwICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgICAgdHJhY2tpbmdDYW1lcmEucm90YXRlWSgxODAgKiBNYXRoLlBJIC8gMTgwKTtcclxuXHJcbiAgICAgICAgb2JqZWN0LmFkZChwb3ZDYW1lcmEpO1xyXG4gICAgICAgIG9iamVjdC5hZGQodHJhY2tpbmdDYW1lcmEpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvZ2dsZU1vdmVtZW50cyhpc0xvY2tlZCkge1xyXG4gICAgICAgIG1vdmVtZW50c0xvY2tlZCA9IGlzTG9ja2VkO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZG9Nb3ZlbWVudExvb3A6IGRvTW92ZW1lbnRMb29wLFxyXG4gICAgICAgIHBsYXllck9iamVjdDogcGxheWVyT2JqZWN0LFxyXG4gICAgICAgIGdldENhbWVyYTogZ2V0Q2FtZXJhLFxyXG4gICAgICAgIHBsYXllcklkOiBwbGF5ZXJJZCxcclxuICAgICAgICBjcmFzaDogY3Jhc2gsXHJcbiAgICAgICAgdG9nZ2xlTW92ZW1lbnRzOiB0b2dnbGVNb3ZlbWVudHNcclxuICAgIH07XHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBNYWluIGZpbGUgb2YgdGhlIGdhbWUuXHJcbiAqL1xyXG5cclxuY29uc3QgTm90TWFyaW9LYXJ0ID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3Qgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcclxuICAgIGNvbnN0IG1pbmlNYXBSZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCk7XHJcbiAgICBjb25zdCBtaW5pTWFwQ2FtZXJhID0gbmV3IFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYShcclxuICAgICAgICAtV0lORE9XX1dJRFRIIC8gTUlOSUNBTV9GQUNUT1IsXHJcbiAgICAgICAgV0lORE9XX1dJRFRIIC8gTUlOSUNBTV9GQUNUT1IsXHJcbiAgICAgICAgV0lORE9XX0hFSUdIVCAvIE1JTklDQU1fRkFDVE9SLFxyXG4gICAgICAgIC1XSU5ET1dfSEVJR0hUIC8gTUlOSUNBTV9GQUNUT1IsXHJcbiAgICAgICAgVE9QX0NBTUVSQV9ESVNUIC0gNTAsXHJcbiAgICAgICAgVE9QX0NBTUVSQV9ESVNUICsgNTBcclxuICAgICk7XHJcbiAgICB2YXIgZmxvb3I7XHJcbiAgICAvL0JveCBvYmplY3RzXHJcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xyXG4gICAgdmFyIGNoZWNrcG9pbnRzID0gW107XHJcbiAgICBjb25zdCBwbGF5ZXJzID0ge307XHJcbiAgICAvL0JveCBwb3NpdGlvbnMgZm9yIG90aGVyIHBsYXllcnNcclxuICAgIHZhciBib3hlcyA9IFtdO1xyXG4gICAgdmFyIGxhcCA9IDA7XHJcbiAgICB2YXIgY2hlY2tMYXBDb3VudCA9IDA7XHJcbiAgICB2YXIgY3VycmVudENoZWNrcG9pbnQ7XHJcbiAgICB2YXIgbGFzdENoZWNrcG9pbnQgPSAwO1xyXG4gICAgdmFyIG90aGVyUGxheWVyc01vZGFsO1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRTb2NrZXRFdmVudCgpIHtcclxuICAgICAgICB2YXIgc29ja2V0ID0gaW8oeyB0cmFuc3BvcnRzOiBbJ3dlYnNvY2tldCddLCB1cGdyYWRlOiBmYWxzZSB9KTtcclxuXHJcbiAgICAgICAgdmFyIG1vZGFsID0gcGljb01vZGFsKHtcclxuICAgICAgICAgICAgY29udGVudDpcclxuICAgICAgICAgICAgICAgICdQbGVhc2UgZW50ZXIgYSBuYW1lOiA8aW5wdXQgaWQ9XCJwbGF5ZXJOYW1lXCIvPjxici8+PGJ1dHRvbiBpZD1cInBsYXllck5hbWVCdG5cIj5TdGFydCE8L2J1dHRvbj4nLFxyXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbjogZmFsc2UsXHJcbiAgICAgICAgICAgIG92ZXJsYXlDbG9zZTogZmFsc2VcclxuICAgICAgICB9KS5zaG93KCk7XHJcblxyXG4gICAgICAgICQoJyNwbGF5ZXJOYW1lQnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdwbGF5ZXItbmFtZScsICQoJyNwbGF5ZXJOYW1lJykudmFsKCkpO1xyXG4gICAgICAgICAgICBtb2RhbC5jbG9zZSgpO1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2cocGxheWVycy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhwbGF5ZXJzKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciB3YWl0aW5nTW9kYWwgPSBwaWNvTW9kYWwoe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdXYWl0aW5nIGZvciBvdGhlciBwbGF5ZXJzLi4uJyxcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZUJ1dHRvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheUNsb3NlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSkuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNvY2tldC5vbignYWxsLXBsYXllcnMnLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbYWxsLXBsYXllcnNdJywgZGF0YSk7XHJcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihwbGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IHBsYXllci5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdCA9IHBsYXllci5yb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNhciA9IG1ha2VDYXJPYmplY3QoKTtcclxuICAgICAgICAgICAgICAgIHBsYXllcnNbcGxheWVyLmlkXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiByb3QsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyOiBjYXJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjYXIucG9zaXRpb24uc2V0KHBvcy54LCBwb3MueSwgcG9zLnopO1xyXG4gICAgICAgICAgICAgICAgY2FyLnJvdGF0aW9uLnNldChyb3QueCwgcm90LnksIHJvdC56KTtcclxuICAgICAgICAgICAgICAgIHNjZW5lLmFkZChjYXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhZGRCb3hlcygpO1xyXG4gICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoJ3NlbmQtYm94ZXMnLCBib3hlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc29ja2V0Lm9uKCdwbGF5ZXItam9pbmVkJywgZnVuY3Rpb24ocGxheWVyKSB7XHJcbiAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKGBwbGF5ZXIgJHtwbGF5ZXIuaWR9IGhhcyBqb2luZWQuYCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbcGxheWVyLWpvaW5lZF0nLCBwbGF5ZXIpO1xyXG4gICAgICAgICAgICBjb25zdCBwb3MgPSBwbGF5ZXIucG9zaXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdCA9IHBsYXllci5yb3RhdGlvbjtcclxuICAgICAgICAgICAgY29uc3QgY2FyID0gbWFrZUNhck9iamVjdCgpO1xyXG4gICAgICAgICAgICBwbGF5ZXJzW3BsYXllci5pZF0gPSB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zLFxyXG4gICAgICAgICAgICAgICAgcm90YXRpb246IHJvdCxcclxuICAgICAgICAgICAgICAgIGNhcjogY2FyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNhci5wb3NpdGlvbi5zZXQocG9zLngsIHBvcy55LCBwb3Mueik7XHJcbiAgICAgICAgICAgIGNhci5yb3RhdGlvbi5zZXQocm90LngsIHJvdC55LCByb3Queik7XHJcbiAgICAgICAgICAgIHNjZW5lLmFkZChjYXIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzb2NrZXQub24oJ3JlY2VpdmUtYm94ZXMnLCBmdW5jdGlvbihib3hzKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdbcGxheWVyLWxlZnRdJywgcGxheWVySWQpO1xyXG4gICAgICAgICAgICBib3hlcyA9IGJveHM7XHJcbiAgICAgICAgICAgIGFkZEJveGVzUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgLy8gY29uc3QgY2FyID0gcGxheWVyc1twbGF5ZXJJZF0uLy9jYXI7XHJcbiAgICAgICAgICAgIC8vIHNjZW5lLnJlbW92ZShjYXIpO1xyXG4gICAgICAgICAgICAvLyBkZWxldGUgcGxheWVyc1twbGF5ZXJJZF07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNvY2tldC5vbigncGxheWVyLWxlZnQnLCBmdW5jdGlvbihwbGF5ZXJJZCkge1xyXG4gICAgICAgICAgICB0b2FzdHIuZXJyb3IoYFBsYXllciAke3BsYXllcklkfSBoYXMgbGVmdC5gKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1twbGF5ZXItbGVmdF0nLCBwbGF5ZXJJZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhciA9IHBsYXllcnNbcGxheWVySWRdLmNhcjtcclxuICAgICAgICAgICAgc2NlbmUucmVtb3ZlKGNhcik7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBwbGF5ZXJzW3BsYXllcklkXTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc29ja2V0Lm9uKCd1cGRhdGUtcGxheWVyJywgZnVuY3Rpb24ocGxheWVyKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbdXBkYXRlLXBsYXllcl0nLCBwbGF5ZXIpO1xyXG4gICAgICAgICAgICBjb25zdCBpZCA9IHBsYXllci5pZDtcclxuICAgICAgICAgICAgY29uc3QgcG9zID0gcGxheWVyLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICBjb25zdCByb3QgPSBwbGF5ZXIucm90YXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSBwbGF5ZXJzW2lkXTtcclxuICAgICAgICAgICAgcC5jYXIucG9zaXRpb24uc2V0KHBvcy54LCBwb3MueSwgcG9zLnopO1xyXG4gICAgICAgICAgICBwLmNhci5yb3RhdGlvbi5zZXQocm90LngsIHJvdC55LCByb3Queik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNvY2tldC5vbignc3RhcnQtY291bnRkb3duJywgZnVuY3Rpb24oc2Vjb25kcykge1xyXG4gICAgICAgICAgICB0b2FzdHIuaW5mbyhgJHtzZWNvbmRzfSBzZWNvbmRzIGJlZm9yZSB0aGUgcmFjZSBzdGFydHMuYCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3RhcnQtY291bnRkb3duXScsIHNlY29uZHMpO1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBzaG93IFwieCBzZWNvbmRzIGJlZm9yZSBzdGFydFwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNvY2tldC5vbignc3RhcnQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdG9hc3RyLmluZm8oJ1RoZSByYWNlIGhhcyBzdGFydGVkLicpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3N0YXJ0XScpO1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBub3RpZnkgdGhlIGdhbWUgaGFzIHN0YXJ0ZWRcclxuICAgICAgICAgICAgLy8gVE9ETzogZGlzYWJsZSBtb3ZpbmcgaWYgbm90IHN0YXJ0ZWRcclxuICAgICAgICAgICAgLy8gVE9ETzogZXZlcnlvbmUgbmVlZHMgYSBuYW1lIGZpcnN0IChkb24ndCBoaWRlIG1vZGFsKVxyXG4gICAgICAgICAgICAvLyBUT0RPOiBldmVyeW9uZSBuZWVkcyB0byBiZSByZWFkeVxyXG4gICAgICAgICAgICAvLyBUT0RPOiAyKyBwbGF5ZXJzXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNvY2tldC5vbignZmluaXNoZWQnLCBmdW5jdGlvbih0aW1lKSB7XHJcbiAgICAgICAgICAgIHRvYXN0ci5pbmZvKCdZb3UgZmluaXNoZWQuJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbZmluaXNoZWRdJywgdGltZSk7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IHNob3cgbW9kYWwgXCJ3YWl0aW5nIGZvciBvdGhlcnMsIHlvdXIgdGltZSBpcyB4XCJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc29ja2V0Lm9uKCdzdG9wJywgZnVuY3Rpb24ocGxheWVycykge1xyXG4gICAgICAgICAgICB0b2FzdGVyLmluZm8oJ1RoZSByYWNlIGlzIG92ZXIuJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3RvcF0nLCBzdG9wKTtcclxuICAgICAgICAgICAgLy8gVE9ETzogYWxsIHBsYXllcnMgYXJlIGZpbmlzaGVkLCBzaG93IHJhbmtpbmcgYW5kIHBsYXkgYWdhaW4gYnV0dG9uXHJcbiAgICAgICAgICAgIHBsYXllcnMuZm9yRWFjaChmdW5jdGlvbihwbGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNvcnRlZCBieSByYW5raW5nIDotKVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHBsYXllci5uYW1lO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZSA9IHRpbWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSBQbGF5ZXIucGxheWVyT2JqZWN0O1xyXG4gICAgICAgICAgICBzb2NrZXQuZW1pdCgndXBkYXRlLXBsYXllcicsIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogcC5wb3NpdGlvbi54LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IHAucG9zaXRpb24ueSxcclxuICAgICAgICAgICAgICAgICAgICB6OiBwLnBvc2l0aW9uLnpcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByb3RhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IHAucm90YXRpb24uX3gsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogcC5yb3RhdGlvbi5feSxcclxuICAgICAgICAgICAgICAgICAgICB6OiBwLnJvdGF0aW9uLl96XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIDEwMDAgLyAyNSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFrZUNhck9iamVjdCgpIHtcclxuICAgICAgICBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuT2JqZWN0TG9hZGVyKCk7XHJcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0gbG9hZGVyLnBhcnNlKHBsYXllckNhcik7XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBidWlsZEZsb29yKCkge1xyXG4gICAgICAgIGxldCBjdXJ2ZSA9IG5ldyBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzKFtcclxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCksXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDAsIDUwMCwgMCksXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKC0yMDAsIDUwMCwgMCksXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKC0yMDAsIDgwMCwgMCksXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDYwMCwgODAwLCAwKSxcclxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoNjAwLCA1MDAsIDApLFxyXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygzMDAsIDUwMCwgMCksXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDMwMCwgMCwgMCksXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDgwMCwgMCwgMCksXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDgwMCwgLTUwMCwgMCksXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDAsIC01MDAsIDApXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgY3VydmUuY2xvc2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IGV4dHJ1ZGVTZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgc3RlcHM6IDEwMCxcclxuICAgICAgICAgICAgZXh0cnVkZVBhdGg6IGN1cnZlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gU2hhcGUgdGhhdCBnZXRzIGV4dHJ1ZGVkIHRocm91Z2ggdGhlIGN1cnZlXHJcbiAgICAgICAgbGV0IHNoYXBlID0gbmV3IFRIUkVFLlNoYXBlKFtcclxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjIoMiAqIENBUl9TSVpFX1ksIDApLFxyXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMigwLCA1ICogQ0FSX1NJWkVfWCksXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IyKDAsIC01ICogQ0FSX1NJWkVfWClcclxuICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkV4dHJ1ZGVHZW9tZXRyeShzaGFwZSwgZXh0cnVkZVNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgbGV0IG1hdGVyaWFscyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTlVNQkVSX0NPTE9SUzsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1hdGVyaWFscy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogUk9BRF9DT0xPUlNbaV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vd2lyZWZyYW1lOiB0cnVlIC8vIFRoaXMgbWFrZXMgdHJhY2sgbW9yZSBUcm9uLWxpa2VcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGdlb0ZhY2VzTGVuZ3RoID0gZ2VvbWV0cnkuZmFjZXMubGVuZ3RoIC8gMjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdlb0ZhY2VzTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGogPSBpICogMjsgLy8gPC0tIEFkZGVkIHRoaXMgYmFjayBzbyB3ZSBjYW4gZG8gZXZlcnkgb3RoZXIgJ2ZhY2UnXHJcblxyXG4gICAgICAgICAgICBnZW9tZXRyeS5mYWNlc1tqXS5tYXRlcmlhbEluZGV4ID1cclxuICAgICAgICAgICAgICAgIChpICsgTWF0aC5mbG9vcihpIC8gV09STERfU0lERV9TSVpFKSkgJSBOVU1CRVJfQ09MT1JTO1xyXG5cclxuICAgICAgICAgICAgZ2VvbWV0cnkuZmFjZXNbaiArIDFdLm1hdGVyaWFsSW5kZXggPVxyXG4gICAgICAgICAgICAgICAgKGkgKyBNYXRoLmZsb29yKGkgLyBXT1JMRF9TSURFX1NJWkUpKSAlIE5VTUJFUl9DT0xPUlM7IC8vIE90aGVyIGhhbGYgb2YgdGhlIHNhbWUgZmFjZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmxvb3IgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWxzKTtcclxuICAgICAgICBmbG9vci5yb3RhdGVYKC1NYXRoLlBJIC8gMik7XHJcbiAgICAgICAgZmxvb3IucG9zaXRpb24ueSA9IDA7XHJcblxyXG4gICAgICAgIHNjZW5lLmFkZChmbG9vcik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkQ2hlY2twb2ludHMoKSB7XHJcbiAgICAgICAgbGV0IGN1cnZlUG9pbnRzID0gW1xyXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAwKSxcclxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMzAwLCAwLCA1ODApLFxyXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygyNTAsIDAsIC0yMDApLFxyXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygyMDAsIDAsIC04NzApLFxyXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAtNTAwKVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VydmVQb2ludHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY3VydmVQb2ludHNbaV0pO1xyXG4gICAgICAgICAgICBsZXQgY2hlY2sgPSBuZXcgQ2hlY2twb2ludChcclxuICAgICAgICAgICAgICAgIGN1cnZlUG9pbnRzW2ldLngsXHJcbiAgICAgICAgICAgICAgICBCT1hfU0laRSAvIDIsXHJcbiAgICAgICAgICAgICAgICBjdXJ2ZVBvaW50c1tpXS56XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcbiAgICAgICAgICAgIC8vIGlmIChpICE9IGN1cnZlUG9pbnRzLmxlbmd0aC0xKSB7XHJcbiAgICAgICAgICAgIGNoZWNrcG9pbnRzLnB1c2goY2hlY2spO1xyXG4gICAgICAgICAgICBzY2VuZS5hZGQoY2hlY2subWVzaCk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkQm94ZXMoKSB7XHJcbiAgICAgICAgbGV0IG1pbiA9IC0yMDAwO1xyXG4gICAgICAgIGxldCBtYXggPSAyMDAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSByYW5kb20gYm94LlxyXG4gICAgICAgICAgICBsZXQgYm94ID0gbmV3IEJveChcclxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSArIG1pbiksXHJcbiAgICAgICAgICAgICAgICBCT1hfU0laRSAvIDIsXHJcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIC8vIEFkZCBvbmx5IGlmIGl0J3Mgb3ZlciB0aGUgZmxvb3IuXHJcbiAgICAgICAgICAgIHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcbiAgICAgICAgICAgIFBoeXNpY3MuZ3Jhdml0eShib3gubWVzaCwgZmxvb3IpO1xyXG4gICAgICAgICAgICBpZiAoYm94Lm1lc2gucG9zaXRpb24ueSA9PSBCT1hfU0laRSAvIDIpIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdHMucHVzaChib3gpO1xyXG4gICAgICAgICAgICAgICAgYm94ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogYm94Lm1lc2gucG9zaXRpb24ueCxcclxuICAgICAgICAgICAgICAgICAgICB6OiBib3gubWVzaC5wb3NpdGlvbi56XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHNjZW5lLmFkZChib3gubWVzaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkQm94ZXNQb3NpdGlvbigpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSByYW5kb20gYm94LlxyXG4gICAgICAgICAgICBsZXQgYm94ID0gbmV3IEJveChib3hlc1tpXS54LCBCT1hfU0laRSAvIDIsIGJveGVzW2ldLnopO1xyXG4gICAgICAgICAgICAvLyBBZGQgb25seSBpZiBpdCdzIG92ZXIgdGhlIGZsb29yLlxyXG4gICAgICAgICAgICBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG4gICAgICAgICAgICBQaHlzaWNzLmdyYXZpdHkoYm94Lm1lc2gsIGZsb29yKTtcclxuICAgICAgICAgICAgaWYgKGJveC5tZXNoLnBvc2l0aW9uLnkgPT0gQk9YX1NJWkUgLyAyKSB7XHJcbiAgICAgICAgICAgICAgICBvYmplY3RzLnB1c2goYm94KTtcclxuICAgICAgICAgICAgICAgIHNjZW5lLmFkZChib3gubWVzaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2hlY2tMYXAoKSB7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRDaGVja3BvaW50ID09IGxhc3RDaGVja3BvaW50ICsgMSkge1xyXG4gICAgICAgICAgICBsYXN0Q2hlY2twb2ludCA9IGN1cnJlbnRDaGVja3BvaW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY3VycmVudENoZWNrcG9pbnQgPT0gMCAmJiBsYXN0Q2hlY2twb2ludCA9PSA0KSB7XHJcbiAgICAgICAgICAgIGxhc3RDaGVja3BvaW50ID0gY3VycmVudENoZWNrcG9pbnQ7XHJcbiAgICAgICAgICAgIGxhcCA9IGxhcCArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICAgICAgcmVuZGVyZXIuc2V0U2l6ZShXSU5ET1dfV0lEVEgsIFdJTkRPV19IRUlHSFQpO1xyXG4gICAgICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xyXG4gICAgICAgIHJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcbiAgICAgICAgcmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XHJcblxyXG4gICAgICAgIG1pbmlNYXBSZW5kZXJlci5zZXRTaXplKFdJTkRPV19XSURUSCAvIDQsIFdJTkRPV19IRUlHSFQgLyA0KTtcclxuICAgICAgICBtaW5pTWFwUmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgbWluaU1hcFJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xyXG4gICAgICAgIG1pbmlNYXBSZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICc1JSc7XHJcbiAgICAgICAgbWluaU1hcFJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUubGVmdCA9ICc3MCUnO1xyXG4gICAgICAgIG1pbmlNYXBSZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnpJbmRleCA9ICcyJztcclxuICAgICAgICBtaW5pTWFwUmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS5vdXRsaW5lID0gJ3doaXRlIHNvbGlkJztcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1pbmlNYXBSZW5kZXJlci5kb21FbGVtZW50KTtcclxuICAgICAgICBtaW5pTWFwUmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XHJcblxyXG4gICAgICAgIG1pbmlNYXBDYW1lcmEucG9zaXRpb24ueSA9IFRPUF9DQU1FUkFfRElTVDtcclxuICAgICAgICBtaW5pTWFwQ2FtZXJhLnJvdGF0aW9uLnggPSAtOTAgKiBNYXRoLlBJIC8gMTgwO1xyXG5cclxuICAgICAgICBidWlsZEZsb29yKCk7XHJcbiAgICAgICAgLy8gYWRkQm94ZXMoKTtcclxuICAgICAgICBhZGRDaGVja3BvaW50cygpO1xyXG5cclxuICAgICAgICBzY2VuZS5hZGQoUGxheWVyLnBsYXllck9iamVjdCk7XHJcbiAgICAgICAgaW5pdFNvY2tldEV2ZW50KCk7XHJcbiAgICAgICAgbG9vcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvb3AoKSB7XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xyXG5cclxuICAgICAgICByZW5kZXJlci5jbGVhcigpO1xyXG4gICAgICAgIHJlbmRlcmVyLnNldFZpZXdwb3J0KDAsIDAsIFdJTkRPV19XSURUSCwgV0lORE9XX0hFSUdIVCk7XHJcbiAgICAgICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBQbGF5ZXIuZ2V0Q2FtZXJhKCkpO1xyXG5cclxuICAgICAgICBtaW5pTWFwUmVuZGVyZXIuY2xlYXIoKTtcclxuICAgICAgICBtaW5pTWFwUmVuZGVyZXIuc2V0Vmlld3BvcnQoMCwgMCwgV0lORE9XX1dJRFRIIC8gNCwgV0lORE9XX0hFSUdIVCAvIDQpO1xyXG4gICAgICAgIG1pbmlNYXBSZW5kZXJlci5yZW5kZXIoc2NlbmUsIG1pbmlNYXBDYW1lcmEpO1xyXG5cclxuICAgICAgICAvLyBmb3IgKGxldCBpZCBpbiBwbGF5ZXJzKSB7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IHAgPSBwbGF5ZXJzW2lkXTtcclxuICAgICAgICAvLyAgICAgY29uc3QgcG9zID0gcC5wb3NpdGlvbjtcclxuICAgICAgICAvLyAgICAgY29uc3Qgcm90ID0gcC5yb3RhdGlvbjtcclxuICAgICAgICAvLyAgICAgcC5jYXIucG9zaXRpb24uc2V0KHBvcy54LCBwb3MueSwgcG9zLnopO1xyXG4gICAgICAgIC8vICAgICBwLmNhci5yb3RhdGlvbi5zZXQocm90LngsIHJvdC55LCByb3Queik7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBQbGF5ZXIuZG9Nb3ZlbWVudExvb3AoKTtcclxuICAgICAgICBpZiAoUGh5c2ljcy5kZXRlY3RDb2xsaXNpb24oUGxheWVyLnBsYXllck9iamVjdCwgb2JqZWN0cykpIHtcclxuICAgICAgICAgICAgUGxheWVyLmNyYXNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN1cnJlbnRDaGVja3BvaW50ID0gUGh5c2ljcy5jaGVja1BvaW50cyhcclxuICAgICAgICAgICAgUGxheWVyLnBsYXllck9iamVjdCxcclxuICAgICAgICAgICAgY2hlY2twb2ludHNcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChjdXJyZW50Q2hlY2twb2ludCAhPSAtMSkge1xyXG4gICAgICAgICAgICBpZiAoY2hlY2tMYXBDb3VudCAlIDEwID09IDApIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrTGFwKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2hlY2tMYXBDb3VudCArPSAxO1xyXG4gICAgICAgICAgICBjaGVja0xhcENvdW50ID0gY2hlY2tMYXBDb3VudCAlIDEwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtaW5pTWFwQ2FtZXJhLnBvc2l0aW9uLnogPSBQbGF5ZXIucGxheWVyT2JqZWN0LnBvc2l0aW9uLno7XHJcblxyXG4gICAgICAgIFBoeXNpY3MuZ3Jhdml0eShQbGF5ZXIucGxheWVyT2JqZWN0LCBmbG9vcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBpbml0XHJcbiAgICB9O1xyXG59KSgpO1xyXG4iXX0=
