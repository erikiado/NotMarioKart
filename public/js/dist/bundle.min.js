"use strict";var WORLD_SIDE_SIZE=7,WINDOW_HEIGHT=window.innerHeight,WINDOW_WIDTH=window.innerWidth,ROAD_COLORS=[16711680,16746496,16776960,65280,65535,255,16711935],NUMBER_COLORS=ROAD_COLORS.length,WORLD_HEIGHT=1e3,WORLD_WIDTH=100,TOP_CAMERA_DIST=50,CAR_SIZE_X=10,CAR_SIZE_Y=10,CAR_SIZE_Z=10,BOX_SIZE=10,Physics=function(){var e=-1,t=new THREE.Vector3(0,-TOP_CAMERA_DIST,0),o=new THREE.Vector3(0,1,0),n=new THREE.Raycaster;return{gravity:function(i,r){t.x=i.position.x,t.z=i.position.z,n.set(t,o),(!n.intersectObject(r,!0).length||i.position.y<0)&&(i.position.y+=e)},detectCollision:function(e,t){for(var o=(new THREE.Box3).setFromObject(e),n=0;n<t.length;n++)if(o.intersectsBox(t[n].boundingBox))return!0;return!1}}}(),Box=function(e,t,o){var n=new THREE.BoxGeometry(BOX_SIZE,BOX_SIZE,BOX_SIZE),i=new THREE.MeshBasicMaterial({color:11176004});this.mesh=new THREE.Mesh(n,i),this.mesh.position.x=e,this.mesh.position.y=t,this.mesh.position.z=o,this.boundingBox=(new THREE.Box3).setFromObject(this.mesh)},Player=function(){function e(e){e=e||event,d[e.which]="keydown"===e.type}var t=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),o=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),n=o,i=function(){var e=(new THREE.ObjectLoader).parse(playerCar);return t.position.y=2*e.scale.y,t.position.z=4*e.scale.z,t.rotateY(180*Math.PI/180),o.position.y=10*e.scale.y,o.position.z=-20*e.scale.z,o.rotateY(180*Math.PI/180),e.add(t),e.add(o),e}(),r={movement:{arrows:{up:38,down:40,left:37,right:39},wasd:{up:87,down:83,left:65,right:68}},switchCamera:67,reset:8},a=r.movement.arrows,s=0,E=5,c=.05,l=.05,d={};return document.addEventListener("keydown",e,!1),document.addEventListener("keyup",e,!1),{doMovementLoop:function(){d[a.up]&&s<E&&(s+=c),d[a.left]&&i.rotateY(l),d[a.right]&&i.rotateY(-l),d[a.down]&&s>0&&(s-=c,s=Math.max(0,s)),i.translateZ(s),d[r.switchCamera]&&(n=n===t?o:t,d[r.switchCamera]=!1),d[r.reset]&&(i.rotation.x=0,i.position.set(0,i.position.x,0),i.rotation.y=0,i.position.set(0,i.position.y,0),i.rotation.z=0,i.position.set(0,i.position.z,0))},playerObject:i,getCamera:function(){return n},playerId:null,crash:function(){s=0}}}(),NotMarioKart=function(){function e(){var e=io({transports:["websocket"],upgrade:!1});e.on("all-players",function(e){console.log("[all-players]",e),e.forEach(function(e){var o=e.position,n=e.rotation,i=t();d[e.id]={position:o,rotation:n,car:i},i.position.set(o.x,o.y,o.z),i.rotation.set(n.x,n.y,n.z),a.add(i)})}),e.on("player-joined",function(e){console.log("[player-joined]",e);var o=e.position,n=e.rotation,i=t();d[e.id]={position:o,rotation:n,car:i},i.position.set(o.x,o.y,o.z),i.rotation.set(n.x,n.y,n.z),a.add(i)}),e.on("player-left",function(e){console.log("[player-left]",e);var t=d[e].car;a.remove(t),delete d[e]}),e.on("update-player",function(e){console.log("[update-player]",e);var t=e.id,o=e.position,n=e.rotation,i=d[t];i.car.position.set(o.x,o.y,o.z),i.car.rotation.set(n.x,n.y,n.z)}),e.on("start-countdown",function(e){console.log("[start-countdown]",e)}),e.on("start",function(){console.log("[start]")}),e.on("finished",function(e){console.log("[finished]",e)}),e.on("stop",function(e){console.log("[stop]",stop),e.forEach(function(e){e.name})}),window.setInterval(function(){var t=Player.playerObject;e.emit("update-player",{position:{x:t.position.x,y:t.position.y,z:t.position.z},rotation:{x:t.rotation._x,y:t.rotation._y,z:t.rotation._z}})},1e3/24)}function t(){return(new THREE.ObjectLoader).parse(playerCar)}function o(){var e=new THREE.CatmullRomCurve3([new THREE.Vector3(0,0,0),new THREE.Vector3(0,500,0),new THREE.Vector3(-200,500,0),new THREE.Vector3(-200,800,0),new THREE.Vector3(600,800,0),new THREE.Vector3(600,500,0),new THREE.Vector3(300,500,0),new THREE.Vector3(300,0,0),new THREE.Vector3(800,0,0),new THREE.Vector3(800,-500,0),new THREE.Vector3(0,-500,0)]);e.closed=!0;for(var t={steps:100,extrudePath:e},o=new THREE.Shape([new THREE.Vector2(2*CAR_SIZE_Y,0),new THREE.Vector2(0,5*CAR_SIZE_X),new THREE.Vector2(0,-5*CAR_SIZE_X)]),n=new THREE.ExtrudeGeometry(o,t),i=[],s=0;s<NUMBER_COLORS;s++)i.push(new THREE.MeshBasicMaterial({color:ROAD_COLORS[s],side:THREE.DoubleSide}));for(var E=n.faces.length/2,c=0;c<E;c++){var l=2*c;n.faces[l].materialIndex=(c+Math.floor(c/WORLD_SIDE_SIZE))%NUMBER_COLORS,n.faces[l+1].materialIndex=(c+Math.floor(c/WORLD_SIDE_SIZE))%NUMBER_COLORS}(r=new THREE.Mesh(n,i)).rotateX(-Math.PI/2),r.position.y=0,a.add(r)}function n(){for(var e=0;e<1e3;e++){var t=new Box(Math.floor(4001*Math.random()-2e3),BOX_SIZE/2,Math.floor(4001*Math.random()-2e3));a.updateMatrixWorld(),Physics.gravity(t.mesh,r),t.mesh.position.y==BOX_SIZE/2&&(l.push(t),a.add(t.mesh))}}function i(){requestAnimationFrame(i),s.clear(),s.setViewport(0,0,WINDOW_WIDTH,WINDOW_HEIGHT),s.render(a,Player.getCamera()),E.clear(),E.setViewport(0,0,WINDOW_WIDTH/4,WINDOW_HEIGHT/4),E.render(a,c),Player.doMovementLoop(),Physics.detectCollision(Player.playerObject,l)&&Player.crash(),c.position.z=Player.playerObject.position.z,Physics.gravity(Player.playerObject,r)}var r,a=new THREE.Scene,s=new THREE.WebGLRenderer,E=new THREE.WebGLRenderer,c=new THREE.OrthographicCamera(-WINDOW_WIDTH,WINDOW_WIDTH,WINDOW_HEIGHT,-WINDOW_HEIGHT,TOP_CAMERA_DIST-50,TOP_CAMERA_DIST+50),l=[],d={};return{init:function(){s.setSize(WINDOW_WIDTH,WINDOW_HEIGHT),s.setPixelRatio(window.devicePixelRatio),s.domElement.style.position="fixed",document.body.appendChild(s.domElement),s.autoClear=!1,E.setSize(WINDOW_WIDTH/4,WINDOW_HEIGHT/4),E.setPixelRatio(window.devicePixelRatio),E.domElement.style.position="fixed",E.domElement.style.top="5%",E.domElement.style.left="70%",E.domElement.style.zIndex="2",E.domElement.style.outline="white solid",document.body.appendChild(E.domElement),E.autoClear=!1,c.position.y=TOP_CAMERA_DIST,c.rotation.x=-90*Math.PI/180,o(),n(),a.add(Player.playerObject),e(),i()}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
