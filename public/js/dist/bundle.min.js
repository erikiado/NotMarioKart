"use strict";var WORLD_SIDE_SIZE=7,WINDOW_HEIGHT=window.innerHeight,WINDOW_WIDTH=window.innerWidth,ROAD_COLORS=[16711680,16746496,16776960,65280,65535,255,16711935],NUMBER_COLORS=ROAD_COLORS.length,WORLD_HEIGHT=1e3,WORLD_WIDTH=100,TOP_CAMERA_DIST=50,CAR_SIZE_X=10,CAR_SIZE_Y=10,CAR_SIZE_Z=10,NotMarioKart=function(){function e(){var e=io({transports:["websocket"],upgrade:!1});e.on("all-players",function(e){console.log("[all-players]",e),e.forEach(function(e){var o=e.position,n=e.rotation,a=t();s[e.id]={position:o,rotation:n,car:a},a.position.set(o.x,o.y,o.z),a.rotation.set(n.x,n.y,n.z),r.add(a)})}),e.on("player-joined",function(e){console.log("[player-joined]",e);var o=e.position,n=e.rotation,a=t();s[e.id]={position:o,rotation:n,car:a},a.position.set(o.x,o.y,o.z),a.rotation.set(n.x,n.y,n.z),r.add(a)}),e.on("player-left",function(e){console.log("[player-left]",e);var t=s[e].car;r.remove(t),delete s[e]}),e.on("update-player",function(e){console.log("[update-player]",e);var t=e.id,o=e.position,n=e.rotation,r=s[t];r.car.position.set(o.x,o.y,o.z),r.car.rotation.set(n.x,n.y,n.z)}),e.on("start-countdown",function(e){console.log("[start-countdown]",e)}),e.on("start",function(){console.log("[start]")}),e.on("finished",function(e){console.log("[finished]",e)}),e.on("stop",function(e){console.log("[stop]",stop),e.forEach(function(e){e.name})}),window.setInterval(function(){var t=Player.playerObject;e.emit("update-player",{position:{x:t.position.x,y:t.position.y,z:t.position.z},rotation:{x:t.rotation._x,y:t.rotation._y,z:t.rotation._z}})},1e3/24)}function t(){return(new THREE.ObjectLoader).parse(playerCar)}function o(){var e=new THREE.CatmullRomCurve3([new THREE.Vector3(0,0,0),new THREE.Vector3(0,500,0),new THREE.Vector3(-200,500,0),new THREE.Vector3(-200,800,0),new THREE.Vector3(600,800,0),new THREE.Vector3(600,500,0),new THREE.Vector3(300,500,0),new THREE.Vector3(300,0,0),new THREE.Vector3(800,0,0),new THREE.Vector3(800,-500,0),new THREE.Vector3(0,-500,0)]);e.closed=!0;for(var t={steps:100,extrudePath:e},o=new THREE.Shape([new THREE.Vector2(2*CAR_SIZE_Y,0),new THREE.Vector2(0,5*CAR_SIZE_X),new THREE.Vector2(0,-5*CAR_SIZE_X)]),n=new THREE.ExtrudeGeometry(o,t),a=[],i=0;i<NUMBER_COLORS;i++)a.push(new THREE.MeshBasicMaterial({color:ROAD_COLORS[i],side:THREE.DoubleSide}));for(var E=n.faces.length/2,s=0;s<E;s++){var l=2*s;n.faces[l].materialIndex=(s+Math.floor(s/WORLD_SIDE_SIZE))%NUMBER_COLORS,n.faces[l+1].materialIndex=(s+Math.floor(s/WORLD_SIDE_SIZE))%NUMBER_COLORS}var c=new THREE.Mesh(n,a);c.rotateX(-Math.PI/2),c.position.y=0,r.add(c)}function n(){requestAnimationFrame(n),a.clear(),a.setViewport(0,0,WINDOW_WIDTH,WINDOW_HEIGHT),a.render(r,Player.getCamera()),i.clear(),i.setViewport(0,0,WINDOW_WIDTH/4,WINDOW_HEIGHT/4),i.render(r,E),Player.doMovementLoop(),E.position.z=Player.playerObject.position.z}var r=new THREE.Scene,a=new THREE.WebGLRenderer,i=new THREE.WebGLRenderer,E=new THREE.OrthographicCamera(-WINDOW_WIDTH,WINDOW_WIDTH,WINDOW_HEIGHT,-WINDOW_HEIGHT,TOP_CAMERA_DIST-50,TOP_CAMERA_DIST+50),s={};return{init:function(){a.setSize(WINDOW_WIDTH,WINDOW_HEIGHT),a.setPixelRatio(window.devicePixelRatio),a.domElement.style.position="fixed",document.body.appendChild(a.domElement),a.autoClear=!1,i.setSize(WINDOW_WIDTH/4,WINDOW_HEIGHT/4),i.setPixelRatio(window.devicePixelRatio),i.domElement.style.position="fixed",i.domElement.style.top="5%",i.domElement.style.left="70%",i.domElement.style.zIndex="2",i.domElement.style.outline="white solid",document.body.appendChild(i.domElement),i.autoClear=!1,E.position.y=TOP_CAMERA_DIST,E.rotation.x=-90*Math.PI/180,o(),r.add(Player.playerObject),e(),n()}}}(),Player=function(){function e(e){e=e||event,d[e.which]="keydown"===e.type}var t=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),o=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),n=o,r=function(){var e=(new THREE.ObjectLoader).parse(playerCar);return o.position.y=10*e.scale.y,o.position.z=-20*e.scale.z,o.rotateY(180*Math.PI/180),e.add(t),e.add(o),e}(),a={movement:{arrows:{up:38,down:40,left:37,right:39},wasd:{up:87,down:83,left:65,right:68}},switchCamera:67,reset:8},i=a.movement.arrows,E=0,s=5,l=.05,c=.05,d={};return document.addEventListener("keydown",e,!1),document.addEventListener("keyup",e,!1),{doMovementLoop:function(){d[i.up]&&E<s&&(E+=l),d[i.left]&&r.rotateY(c),d[i.right]&&r.rotateY(-c),d[i.down]&&E>0&&(E-=l,E=Math.max(0,E)),r.translateZ(E),d[a.switchCamera]&&(n=n===t?o:t,d[a.switchCamera]=!1),d[a.reset]&&(r.rotation.y=0,r.position.set(0,r.position.y,0))},playerObject:r,getCamera:function(){return n},playerId:null}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
