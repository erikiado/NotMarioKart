"use strict";var WORLD_SIDE_SIZE=7,WINDOW_HEIGHT=window.innerHeight,WINDOW_WIDTH=window.innerWidth,ROAD_COLORS=[16711680,16746496,16776960,65280,65535,255,16711935],NUMBER_COLORS=ROAD_COLORS.length,WORLD_HEIGHT=1e3,WORLD_WIDTH=100,TOP_CAMERA_DIST=50,CAR_SIZE_X=10,CAR_SIZE_Y=10,CAR_SIZE_Z=10,MINICAM_FACTOR=1.5,BOX_SIZE=10,CHECK_SIZE=100,Physics=function(){var e=-1,o=new THREE.Vector3(0,-TOP_CAMERA_DIST,0),t=new THREE.Vector3(0,1,0),n=new THREE.Raycaster;return{gravity:function(i,r){o.x=i.position.x,o.z=i.position.z,n.set(o,t),(!n.intersectObject(r,!0).length||i.position.y<0)&&(i.position.y+=e)},detectCollision:function(e,o){for(var t=(new THREE.Box3).setFromObject(e),n=0;n<o.length;n++)if(t.intersectsBox(o[n].boundingBox))return!0;return!1},checkPoints:function(e,o){for(var t=(new THREE.Box3).setFromObject(e),n=0;n<o.length;n++)if(t.intersectsBox(o[n].boundingBox))return n;return-1}}}(),Checkpoint=function(e,o,t){var n=new THREE.BoxGeometry(CHECK_SIZE,BOX_SIZE,CHECK_SIZE),i=new THREE.MeshBasicMaterial({color:16777215,wireframe:!0});this.mesh=new THREE.Mesh(n,i),this.mesh.position.x=e,this.mesh.position.y=o,this.mesh.position.z=t,this.boundingBox=(new THREE.Box3).setFromObject(this.mesh)},Box=function(e,o,t){var n=new THREE.BoxGeometry(BOX_SIZE,BOX_SIZE,BOX_SIZE),i=new THREE.MeshBasicMaterial({color:11176004});this.mesh=new THREE.Mesh(n,i),this.mesh.position.x=e,this.mesh.position.y=o,this.mesh.position.z=t,this.boundingBox=(new THREE.Box3).setFromObject(this.mesh)},Player=function(){function e(e){e=e||event,d[e.which]="keydown"===e.type}var o=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),t=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),n=t,i=function(){var e=(new THREE.ObjectLoader).parse(playerCar);return o.position.y=2*e.scale.y,o.position.z=4*e.scale.z,o.rotateY(180*Math.PI/180),t.position.y=10*e.scale.y,t.position.z=-20*e.scale.z,t.rotateY(180*Math.PI/180),e.add(o),e.add(t),e}(),r=!0,a={movement:{arrows:{up:38,down:40,left:37,right:39},wasd:{up:87,down:83,left:65,right:68}},switchCamera:67,reset:8},s=a.movement.arrows,c=0,l=5,E=.05,p=.05,d={};return document.addEventListener("keydown",e,!1),document.addEventListener("keyup",e,!1),{doMovementLoop:function(){r?c=0:(d[s.up]&&c<l&&(c+=E),d[s.left]&&i.rotateY(p),d[s.right]&&i.rotateY(-p),d[s.down]&&c>0&&(c-=E,c=Math.max(0,c)),i.translateZ(c),d[a.switchCamera]&&(n=n===o?t:o,d[a.switchCamera]=!1),d[a.reset]&&(i.rotation.x=0,i.position.set(0,i.position.x,0),i.rotation.y=0,i.position.set(0,i.position.y,0),i.rotation.z=0,i.position.set(0,i.position.z,0),c=0))},playerObject:i,getCamera:function(){return n},playerId:null,crash:function(){c=0},lockMovement:function(e){r=e}}}(),NotMarioKart=function(){function e(){E=io({transports:["websocket"],upgrade:!1});var e=picoModal({content:'Please enter a name: <input id="playerName"/><br/><button id="playerNameBtn">Start!</button>',closeButton:!1,overlayClose:!1}).show();$("#playerNameBtn").on("click",function(){E.emit("player-ready",$("#playerName").val()),e.close(),p=picoModal({content:"Waiting for other players...",closeButton:!1,overlayClose:!1}).show()}),E.on("all-players",function(e){console.log("[all-players]",e),e.forEach(function(e){var t=e.position,n=e.rotation,i=o();m[e.id]={position:t,rotation:n,car:i},i.position.set(t.x,t.y,t.z),i.rotation.set(n.x,n.y,n.z),d.add(i)}),0==e.length&&(i(),E.emit("send-boxes",T))}),E.on("player-joined",function(e){toastr.success("player "+e.id+" has joined."),console.log("[player-joined]",e);var t=e.position,n=e.rotation,i=o();m[e.id]={position:t,rotation:n,car:i},i.position.set(t.x,t.y,t.z),i.rotation.set(n.x,n.y,n.z),d.add(i)}),E.on("receive-boxes",function(e){T=e,r()}),E.on("player-left",function(e){toastr.error("Player "+e+" has left."),console.log("[player-left]",e);var o=m[e].car;d.remove(o),delete m[e]}),E.on("update-player",function(e){console.log("[update-player]",e);var o=e.id,t=e.position,n=e.rotation,i=m[o];i.car.position.set(t.x,t.y,t.z),i.car.rotation.set(n.x,n.y,n.z)}),E.on("start-race",function(){p.close();!function e(o){o>=0&&(0==o?(toastr.info("GO!"),Player.lockMovement(!1)):toastr.info(o+" seconds before the race starts."),setTimeout(e,1e3,o-1))}(3)}),E.on("race-over",function(e){picoModal({content:"You lost",closeButton:!0,overlayClose:!1}).show(),Player.lockMovement(!0)}),E.on("finished",function(e){toastr.info("You finished."),console.log("[finished]",e)}),E.on("stop",function(e){toaster.info("The race is over."),console.log("[stop]",stop),e.forEach(function(e){e.name})}),E.on("spectator",function(e){toaster.info("You are not a player, race full")}),window.setInterval(function(){var e=Player.playerObject;E.emit("update-player",{position:{x:e.position.x,y:e.position.y,z:e.position.z},rotation:{x:e.rotation._x,y:e.rotation._y,z:e.rotation._z}})},40)}function o(){return(new THREE.ObjectLoader).parse(playerCar)}function t(){var e=new THREE.CatmullRomCurve3([new THREE.Vector3(0,0,0),new THREE.Vector3(0,500,0),new THREE.Vector3(-200,500,0),new THREE.Vector3(-200,800,0),new THREE.Vector3(600,800,0),new THREE.Vector3(600,500,0),new THREE.Vector3(300,500,0),new THREE.Vector3(300,0,0),new THREE.Vector3(800,0,0),new THREE.Vector3(800,-500,0),new THREE.Vector3(0,-500,0)]);e.closed=!0;for(var o={steps:100,extrudePath:e},t=new THREE.Shape([new THREE.Vector2(2*CAR_SIZE_Y,0),new THREE.Vector2(0,5*CAR_SIZE_X),new THREE.Vector2(0,-5*CAR_SIZE_X)]),n=new THREE.ExtrudeGeometry(t,o),i=[],r=0;r<NUMBER_COLORS;r++)i.push(new THREE.MeshBasicMaterial({color:ROAD_COLORS[r],side:THREE.DoubleSide}));for(var a=n.faces.length/2,s=0;s<a;s++){var l=2*s;n.faces[l].materialIndex=(s+Math.floor(s/WORLD_SIDE_SIZE))%NUMBER_COLORS,n.faces[l+1].materialIndex=(s+Math.floor(s/WORLD_SIDE_SIZE))%NUMBER_COLORS}(c=new THREE.Mesh(n,i)).rotateX(-Math.PI/2),c.position.y=0,d.add(c)}function n(){for(var e=[new THREE.Vector3(0,0,0),new THREE.Vector3(300,0,580),new THREE.Vector3(250,0,-200),new THREE.Vector3(200,0,-870),new THREE.Vector3(0,0,-500)],o=0;o<e.length;o++){var t=new Checkpoint(e[o].x,BOX_SIZE/2,e[o].z);d.updateMatrixWorld(),I.push(t),d.add(t.mesh)}}function i(){for(var e=0;e<1e3;e++){var o=new Box(Math.floor(4001*Math.random()-2e3),BOX_SIZE/2,Math.floor(4001*Math.random()-2e3));d.updateMatrixWorld(),Physics.gravity(o.mesh,c),o.mesh.position.y==BOX_SIZE/2&&(R.push(o),T.push({x:o.mesh.position.x,z:o.mesh.position.z}),d.add(o.mesh))}}function r(){for(var e=0;e<T.length;e++){var o=new Box(T[e].x,BOX_SIZE/2,T[e].z);d.updateMatrixWorld(),Physics.gravity(o.mesh,c),o.mesh.position.y==BOX_SIZE/2&&(R.push(o),d.add(o.mesh))}}function a(){l==f+1&&(f=l),0==l&&4==f&&(f=l,w+=1,E.emit("player-lap",w),2==w&&(Player.lockMovement(!0),picoModal({content:"You won!",closeButton:!0,overlayClose:!1}).show()))}function s(){requestAnimationFrame(s),h.clear(),h.setViewport(0,0,WINDOW_WIDTH,WINDOW_HEIGHT),h.render(d,Player.getCamera()),u.clear(),u.setViewport(0,0,WINDOW_WIDTH/4,WINDOW_HEIGHT/4),u.render(d,y),Player.doMovementLoop(),Physics.detectCollision(Player.playerObject,R)&&Player.crash(),-1!=(l=Physics.checkPoints(Player.playerObject,I))&&(H%10==0&&a(),H+=1,H%=10),y.position.z=Player.playerObject.position.z,Physics.gravity(Player.playerObject,c)}var c,l,E,p,d=new THREE.Scene,h=new THREE.WebGLRenderer,u=new THREE.WebGLRenderer,y=new THREE.OrthographicCamera(-WINDOW_WIDTH/MINICAM_FACTOR,WINDOW_WIDTH/MINICAM_FACTOR,WINDOW_HEIGHT/MINICAM_FACTOR,-WINDOW_HEIGHT/MINICAM_FACTOR,TOP_CAMERA_DIST-50,TOP_CAMERA_DIST+50),R=[],I=[],m={},T=[],w=0,H=0,f=0;return{init:function(){h.setSize(WINDOW_WIDTH,WINDOW_HEIGHT),h.setPixelRatio(window.devicePixelRatio),h.domElement.style.position="fixed",document.body.appendChild(h.domElement),h.autoClear=!1,u.setSize(WINDOW_WIDTH/4,WINDOW_HEIGHT/4),u.setPixelRatio(window.devicePixelRatio),u.domElement.style.position="fixed",u.domElement.style.top="5%",u.domElement.style.left="70%",u.domElement.style.zIndex="2",u.domElement.style.outline="white solid",document.body.appendChild(u.domElement),u.autoClear=!1,y.position.y=TOP_CAMERA_DIST,y.rotation.x=-90*Math.PI/180,t(),n(),d.add(Player.playerObject),e(),s()}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy5qcyIsIlBoeXNpY3MuanMiLCJDaGVja3BvaW50LmpzIiwiQm94LmpzIiwiUGxheWVyLmpzIiwiTm90TWFyaW9LYXJ0LmpzIl0sIm5hbWVzIjpbIldPUkxEX1NJREVfU0laRSIsIldJTkRPV19IRUlHSFQiLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsIldJTkRPV19XSURUSCIsImlubmVyV2lkdGgiLCJST0FEX0NPTE9SUyIsIk5VTUJFUl9DT0xPUlMiLCJsZW5ndGgiLCJXT1JMRF9IRUlHSFQiLCJXT1JMRF9XSURUSCIsIlRPUF9DQU1FUkFfRElTVCIsIkNBUl9TSVpFX1giLCJDQVJfU0laRV9ZIiwiQ0FSX1NJWkVfWiIsIk1JTklDQU1fRkFDVE9SIiwiQk9YX1NJWkUiLCJDSEVDS19TSVpFIiwiUGh5c2ljcyIsImciLCJoZWxsIiwiVEhSRUUiLCJWZWN0b3IzIiwib25lRGlyZWN0aW9uIiwicmF5Y2FzdGVyIiwiUmF5Y2FzdGVyIiwiZ3Jhdml0eSIsIm9iamVjdCIsImZsb29yIiwieCIsInBvc2l0aW9uIiwieiIsInNldCIsImludGVyc2VjdE9iamVjdCIsInkiLCJkZXRlY3RDb2xsaXNpb24iLCJjYXIiLCJvYmplY3RzIiwiY2FyQm94IiwiQm94MyIsInNldEZyb21PYmplY3QiLCJpIiwiaW50ZXJzZWN0c0JveCIsImJvdW5kaW5nQm94IiwiY2hlY2tQb2ludHMiLCJDaGVja3BvaW50IiwiZ2VvbWV0cnkiLCJCb3hHZW9tZXRyeSIsIm1hdGVyaWFsIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJjb2xvciIsIndpcmVmcmFtZSIsInRoaXMiLCJtZXNoIiwiTWVzaCIsIkJveCIsIlBsYXllciIsIm9uS2V5TW92ZSIsImUiLCJldmVudCIsImtleUNvZGVNYXAiLCJ3aGljaCIsInR5cGUiLCJwb3ZDYW1lcmEiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsInRyYWNraW5nQ2FtZXJhIiwiY3VycmVudENhbWVyYSIsInBsYXllck9iamVjdCIsIk9iamVjdExvYWRlciIsInBhcnNlIiwicGxheWVyQ2FyIiwic2NhbGUiLCJyb3RhdGVZIiwiTWF0aCIsIlBJIiwiYWRkIiwibWFrZVBsYXllck9iamVjdCIsIm1vdmVtZW50TG9ja2VkIiwiY29udHJvbHMiLCJtb3ZlbWVudCIsImFycm93cyIsInVwIiwiZG93biIsImxlZnQiLCJyaWdodCIsIndhc2QiLCJzd2l0Y2hDYW1lcmEiLCJyZXNldCIsImVuYWJsZWRDb250cm9scyIsInNwZWVkIiwibWF4U3BlZWQiLCJhY2NlbGVyYXRpb24iLCJyb3RhdGlvblNwZWVkIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZG9Nb3ZlbWVudExvb3AiLCJtYXgiLCJ0cmFuc2xhdGVaIiwicm90YXRpb24iLCJnZXRDYW1lcmEiLCJwbGF5ZXJJZCIsImNyYXNoIiwibG9ja01vdmVtZW50IiwidmFsIiwiTm90TWFyaW9LYXJ0IiwiaW5pdFNvY2tldEV2ZW50Iiwic29ja2V0IiwiaW8iLCJ0cmFuc3BvcnRzIiwidXBncmFkZSIsIm1vZGFsIiwicGljb01vZGFsIiwiY29udGVudCIsImNsb3NlQnV0dG9uIiwib3ZlcmxheUNsb3NlIiwic2hvdyIsIiQiLCJvbiIsImVtaXQiLCJjbG9zZSIsIndhaXRpbmdNb2RhbCIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwiZm9yRWFjaCIsInBsYXllciIsInBvcyIsInJvdCIsIm1ha2VDYXJPYmplY3QiLCJwbGF5ZXJzIiwiaWQiLCJzY2VuZSIsImFkZEJveGVzIiwiYm94ZXMiLCJ0b2FzdHIiLCJzdWNjZXNzIiwiYm94cyIsImFkZEJveGVzUG9zaXRpb24iLCJlcnJvciIsInJlbW92ZSIsInAiLCJtb3ZlIiwic2Vjb25kcyIsImluZm8iLCJzZXRUaW1lb3V0IiwidGltZSIsInRvYXN0ZXIiLCJzdG9wIiwibmFtZSIsInNldEludGVydmFsIiwiX3giLCJfeSIsIl96IiwiYnVpbGRGbG9vciIsImN1cnZlIiwiQ2F0bXVsbFJvbUN1cnZlMyIsImNsb3NlZCIsImV4dHJ1ZGVTZXR0aW5ncyIsInN0ZXBzIiwiZXh0cnVkZVBhdGgiLCJzaGFwZSIsIlNoYXBlIiwiVmVjdG9yMiIsIkV4dHJ1ZGVHZW9tZXRyeSIsIm1hdGVyaWFscyIsInB1c2giLCJzaWRlIiwiRG91YmxlU2lkZSIsImdlb0ZhY2VzTGVuZ3RoIiwiZmFjZXMiLCJqIiwibWF0ZXJpYWxJbmRleCIsInJvdGF0ZVgiLCJhZGRDaGVja3BvaW50cyIsImN1cnZlUG9pbnRzIiwiY2hlY2siLCJ1cGRhdGVNYXRyaXhXb3JsZCIsImNoZWNrcG9pbnRzIiwiYm94IiwicmFuZG9tIiwiY2hlY2tMYXAiLCJjdXJyZW50Q2hlY2twb2ludCIsImxhc3RDaGVja3BvaW50IiwibGFwIiwibG9vcCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlbmRlcmVyIiwiY2xlYXIiLCJzZXRWaWV3cG9ydCIsInJlbmRlciIsIm1pbmlNYXBSZW5kZXJlciIsIm1pbmlNYXBDYW1lcmEiLCJjaGVja0xhcENvdW50IiwiU2NlbmUiLCJXZWJHTFJlbmRlcmVyIiwiT3J0aG9ncmFwaGljQ2FtZXJhIiwiaW5pdCIsInNldFNpemUiLCJzZXRQaXhlbFJhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImRvbUVsZW1lbnQiLCJzdHlsZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImF1dG9DbGVhciIsInRvcCIsInpJbmRleCIsIm91dGxpbmUiXSwibWFwcGluZ3MiOiJhQUlBLElBQU1BLGdCQUFrQixFQUNsQkMsY0FBZ0JDLE9BQU9DLFlBQ3ZCQyxhQUFlRixPQUFPRyxXQUN0QkMsYUFDRixTQUNBLFNBQ0EsU0FDQSxNQUNBLE1BQ0EsSUFDQSxVQUVFQyxjQUFnQkQsWUFBWUUsT0FDNUJDLGFBQWUsSUFDZkMsWUFBYyxJQUNkQyxnQkFBa0IsR0FDbEJDLFdBQWEsR0FDYkMsV0FBYSxHQUNiQyxXQUFhLEdBQ2JDLGVBQWlCLElBQ2pCQyxTQUFXLEdBQ1hDLFdBQWEsSUNyQmJDLFFBQVcsV0FFYixJQUFNQyxHQUFLLEVBQ1BDLEVBQU8sSUFBSUMsTUFBTUMsUUFBUSxHQUFJWCxn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QWdCLElBQUkxSyxNQUFNOEssb0JBQzNCL0wsYUFBZVcsZUFDaEJYLGFBQWVXLGVBQ2ZkLGNBQWdCYyxnQkFDZmQsY0FBZ0JjLGVBQ2pCSixnQkFBa0IsR0FDbEJBLGdCQUFrQixJQUlsQjBCLEtBQ0E0SSxLQUNFaEQsS0FFRkksS0FDQWtELEVBQU0sRUFDTlMsRUFBZ0IsRUFFaEJWLEVBQWlCLEVBaVhyQixPQUNJYyxLQXJFSixXQUNJVixFQUFTVyxRQUFRak0sYUFBY0gsZUFDL0J5TCxFQUFTWSxjQUFjcE0sT0FBT3FNLGtCQUM5QmIsRUFBU2MsV0FBV0MsTUFBTTNLLFNBQVcsUUFDckMrRCxTQUFTNkcsS0FBS0MsWUFBWWpCLEVBQVNjLFlBQ25DZCxFQUFTa0IsV0FBWSxFQUVyQmQsRUFBZ0JPLFFBQVFqTSxhQUFlLEVBQUdILGNBQWdCLEdBQzFENkwsRUFBZ0JRLGNBQWNwTSxPQUFPcU0sa0JBQ3JDVCxFQUFnQlUsV0FBV0MsTUFBTTNLLFNBQVcsUUFDNUNnSyxFQUFnQlUsV0FBV0MsTUFBTUksSUFBTSxLQUN2Q2YsRUFBZ0JVLFdBQVdDLE1BQU10SCxLQUFPLE1BQ3hDMkcsRUFBZ0JVLFdBQVdDLE1BQU1LLE9BQVMsSUFDMUNoQixFQUFnQlUsV0FBV0MsTUFBTU0sUUFBVSxjQUMzQ2xILFNBQVM2RyxLQUFLQyxZQUFZYixFQUFnQlUsWUFDMUNWLEVBQWdCYyxXQUFZLEVBRTVCYixFQUFjakssU0FBU0ksRUFBSXZCLGdCQUMzQm9MLEVBQWM3RixTQUFTckUsR0FBSyxHQUFLNEMsS0FBS0MsR0FBSyxJQUUzQytFLElBRUFvQixJQUVBMUMsRUFBTXhELElBQUluQixPQUFPVyxjQUNqQnNDLElBQ0ErRSxNQTdWYyIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbGwgY29uc3RhbnRzLCBhdmFpbGFibGUgaW4gZ2xvYmFsIHdpbmRvdy5cbiAqL1xuXG5jb25zdCBXT1JMRF9TSURFX1NJWkUgPSA3O1xuY29uc3QgV0lORE9XX0hFSUdIVCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbmNvbnN0IFdJTkRPV19XSURUSCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuY29uc3QgUk9BRF9DT0xPUlMgPSBbXG4gICAgMHhmZjAwMDAsXG4gICAgMHhmZjg4MDAsXG4gICAgMHhmZmZmMDAsXG4gICAgMHgwMGZmMDAsXG4gICAgMHgwMGZmZmYsXG4gICAgMHgwMDAwZmYsXG4gICAgMHhmZjAwZmZcbl07XG5jb25zdCBOVU1CRVJfQ09MT1JTID0gUk9BRF9DT0xPUlMubGVuZ3RoO1xuY29uc3QgV09STERfSEVJR0hUID0gMTAwMDtcbmNvbnN0IFdPUkxEX1dJRFRIID0gMTAwO1xuY29uc3QgVE9QX0NBTUVSQV9ESVNUID0gNTA7XG5jb25zdCBDQVJfU0laRV9YID0gMTA7XG5jb25zdCBDQVJfU0laRV9ZID0gMTA7XG5jb25zdCBDQVJfU0laRV9aID0gMTA7XG5jb25zdCBNSU5JQ0FNX0ZBQ1RPUiA9IDEuNTtcbmNvbnN0IEJPWF9TSVpFID0gMTA7XG5jb25zdCBDSEVDS19TSVpFID0gMTAwO1xuIiwiLyoqXG4gKiBQaHlzaWNzIFwiZW5naW5lXCIgZm9yIHRoZSBnYW1lLlxuICogTm90UGh5c2lqcyBmb3IgTm90TWFyaW9LYXJ0LlxuICovXG5jb25zdCBQaHlzaWNzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgY29uc3QgZyA9IC0xO1xuICAgIGxldCBoZWxsID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgLVRPUF9DQU1FUkFfRElTVCwgMCk7XG4gICAgbGV0IG9uZURpcmVjdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDEsIDApO1xuICAgIGxldCByYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKCk7XG5cbiAgICBmdW5jdGlvbiBncmF2aXR5KG9iamVjdCwgZmxvb3IpIHtcbiAgICAgICAgLy8gVXBkYXRlIHJheWNhc3RlciB3aXRoIGFuIG9yaWdpbiBiZWxvdyB0aGUgb2JqZWN0LlxuICAgICAgICBoZWxsLnggPSBvYmplY3QucG9zaXRpb24ueDtcbiAgICAgICAgaGVsbC56ID0gb2JqZWN0LnBvc2l0aW9uLno7XG4gICAgICAgIHJheWNhc3Rlci5zZXQoaGVsbCwgb25lRGlyZWN0aW9uKTtcblxuICAgICAgICAvLyBUcnkgdG8gaW50ZXJzZWN0IHdpdGggZmxvb3IuXG4gICAgICAgIGxldCBpbnRlcnNlY3RzID0gcmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdChmbG9vciwgdHJ1ZSk7XG4gICAgICAgIGlmICghaW50ZXJzZWN0cy5sZW5ndGggfHwgb2JqZWN0LnBvc2l0aW9uLnkgPCAwKSB7XG4gICAgICAgICAgICBvYmplY3QucG9zaXRpb24ueSArPSBnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGV0ZWN0Q29sbGlzaW9uKGNhciwgb2JqZWN0cykge1xuICAgICAgICBsZXQgY2FyQm94ID0gbmV3IFRIUkVFLkJveDMoKS5zZXRGcm9tT2JqZWN0KGNhcik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGNhckJveC5pbnRlcnNlY3RzQm94KG9iamVjdHNbaV0uYm91bmRpbmdCb3gpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrUG9pbnRzKGNhciwgb2JqZWN0cykge1xuICAgICAgICBsZXQgY2FyQm94ID0gbmV3IFRIUkVFLkJveDMoKS5zZXRGcm9tT2JqZWN0KGNhcik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGNhckJveC5pbnRlcnNlY3RzQm94KG9iamVjdHNbaV0uYm91bmRpbmdCb3gpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdyYXZpdHk6IGdyYXZpdHksXG4gICAgICAgIGRldGVjdENvbGxpc2lvbjogZGV0ZWN0Q29sbGlzaW9uLFxuICAgICAgICBjaGVja1BvaW50czogY2hlY2tQb2ludHNcbiAgICB9O1xufSkoKTtcbiIsIi8qKlxuICogQm94ZXMgcmVwcmVzZW50aW5nIG9ic3RhY2xlcy5cbiAqL1xuY29uc3QgQ2hlY2twb2ludCA9IChmdW5jdGlvbih4LCB5LCB6KSB7XG4gICAgbGV0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KCBDSEVDS19TSVpFLCBCT1hfU0laRSwgQ0hFQ0tfU0laRSApO1xuICAgIGxldCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgge2NvbG9yOiAweGZmZmZmZiwgd2lyZWZyYW1lOnRydWV9ICk7XG4gICAgdGhpcy5tZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ID0geDtcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueSA9IHk7XG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnogPSB6O1xuICAgIHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94MygpLnNldEZyb21PYmplY3QodGhpcy5tZXNoKTtcbn0pO1xuIiwiLyoqXG4gKiBCb3hlcyByZXByZXNlbnRpbmcgb2JzdGFjbGVzLlxuICovXG5jb25zdCBCb3ggPSAoZnVuY3Rpb24oeCwgeSwgeikge1xuICAgIGxldCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSggQk9YX1NJWkUsIEJPWF9TSVpFLCBCT1hfU0laRSApO1xuICAgIGxldCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgge2NvbG9yOiAweGFhODg0NH0gKTtcbiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSB4O1xuICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID0geTtcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueiA9IHo7XG4gICAgdGhpcy5ib3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKCkuc2V0RnJvbU9iamVjdCh0aGlzLm1lc2gpO1xufSk7XG4iLCIvKipcbiAqIEV2ZXJ5dGhpbmcgYWJvdXQgdGhlIFBsYXllciBvYmplY3QsIGl0cyBjYW1lcmEsIHRoZSBtb3ZlbWVudHMgLi4uXG4gKi9cblxuY29uc3QgUGxheWVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHBvdkNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShcbiAgICAgICAgNzUsXG4gICAgICAgIFdJTkRPV19XSURUSCAvIFdJTkRPV19IRUlHSFQsXG4gICAgICAgIDAuMSxcbiAgICAgICAgMTAwMFxuICAgICk7XG5cbiAgICBjb25zdCB0cmFja2luZ0NhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShcbiAgICAgICAgNzUsXG4gICAgICAgIFdJTkRPV19XSURUSCAvIFdJTkRPV19IRUlHSFQsXG4gICAgICAgIDAuMSxcbiAgICAgICAgMTAwMFxuICAgICk7XG5cbiAgICBsZXQgY3VycmVudENhbWVyYSA9IHRyYWNraW5nQ2FtZXJhO1xuICAgIGxldCBnZXRDYW1lcmEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRDYW1lcmE7XG4gICAgfTtcblxuXG4gICAgY29uc3QgcGxheWVyT2JqZWN0ID0gbWFrZVBsYXllck9iamVjdCgpO1xuICAgIHZhciBwbGF5ZXJJZCA9IG51bGw7XG4gICAgdmFyIG1vdmVtZW50TG9ja2VkID0gdHJ1ZTtcblxuICAgIGNvbnN0IGNvbnRyb2xzID0ge1xuICAgICAgICBtb3ZlbWVudDoge1xuICAgICAgICAgICAgYXJyb3dzOiB7XG4gICAgICAgICAgICAgICAgdXA6IDM4LFxuICAgICAgICAgICAgICAgIGRvd246IDQwLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDM3LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiAzOVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdhc2Q6IHtcbiAgICAgICAgICAgICAgICB1cDogODcsXG4gICAgICAgICAgICAgICAgZG93bjogODMsXG4gICAgICAgICAgICAgICAgbGVmdDogNjUsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDY4XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN3aXRjaENhbWVyYTogNjcsXG4gICAgICAgIHJlc2V0OiA4XG4gICAgfTtcblxuICAgIGxldCBlbmFibGVkQ29udHJvbHMgPSBjb250cm9scy5tb3ZlbWVudC5hcnJvd3M7XG5cbiAgICBsZXQgc3BlZWQgPSAwO1xuICAgIGxldCBtYXhTcGVlZCA9IDU7XG4gICAgY29uc3QgYWNjZWxlcmF0aW9uID0gMC4wNTtcbiAgICBjb25zdCByb3RhdGlvblNwZWVkID0gMC4wNTtcblxuICAgIGNvbnN0IGtleUNvZGVNYXAgPSB7fTtcblxuICAgIGZ1bmN0aW9uIG9uS2V5TW92ZShlKSB7XG4gICAgICAgIGUgPSBlIHx8IGV2ZW50OyAvLyBGb3IgSUUuXG4gICAgICAgIGtleUNvZGVNYXBbZS53aGljaF0gPSBlLnR5cGUgPT09ICdrZXlkb3duJztcbiAgICB9XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlNb3ZlLCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBvbktleU1vdmUsIGZhbHNlKTtcblxuICAgIGZ1bmN0aW9uIGRvTW92ZW1lbnRMb29wKCkge1xuICAgICAgICBpZihtb3ZlbWVudExvY2tlZCl7XG4gICAgICAgICAgICBzcGVlZCA9IDBcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBcbiAgICAgICAgaWYgKGtleUNvZGVNYXBbZW5hYmxlZENvbnRyb2xzLnVwXSkge1xuICAgICAgICAgICAgaWYgKHNwZWVkIDwgbWF4U3BlZWQpIHtcbiAgICAgICAgICAgICAgICBzcGVlZCArPSBhY2NlbGVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleUNvZGVNYXBbZW5hYmxlZENvbnRyb2xzLmxlZnRdKSB7XG4gICAgICAgICAgICBwbGF5ZXJPYmplY3Qucm90YXRlWShyb3RhdGlvblNwZWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5Q29kZU1hcFtlbmFibGVkQ29udHJvbHMucmlnaHRdKSB7XG4gICAgICAgICAgICBwbGF5ZXJPYmplY3Qucm90YXRlWSgtcm90YXRpb25TcGVlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleUNvZGVNYXBbZW5hYmxlZENvbnRyb2xzLmRvd25dKSB7XG4gICAgICAgICAgICBpZiAoc3BlZWQgPiAwKSB7XG4gICAgICAgICAgICAgICAgc3BlZWQgLT0gYWNjZWxlcmF0aW9uO1xuICAgICAgICAgICAgICAgIHNwZWVkID0gTWF0aC5tYXgoMCwgc3BlZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBsYXllck9iamVjdC50cmFuc2xhdGVaKHNwZWVkKTtcbiAgICAgICAgaWYgKGtleUNvZGVNYXBbY29udHJvbHMuc3dpdGNoQ2FtZXJhXSkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRDYW1lcmEgPT09IHBvdkNhbWVyYSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDYW1lcmEgPSB0cmFja2luZ0NhbWVyYTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudENhbWVyYSA9IHBvdkNhbWVyYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleUNvZGVNYXBbY29udHJvbHMuc3dpdGNoQ2FtZXJhXSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXlDb2RlTWFwW2NvbnRyb2xzLnJlc2V0XSkge1xuICAgICAgICAgICAgcGxheWVyT2JqZWN0LnJvdGF0aW9uLnggPSAwO1xuICAgICAgICAgICAgcGxheWVyT2JqZWN0LnBvc2l0aW9uLnNldCgwLCBwbGF5ZXJPYmplY3QucG9zaXRpb24ueCwgMCk7XG4gICAgICAgICAgICBwbGF5ZXJPYmplY3Qucm90YXRpb24ueSA9IDA7XG4gICAgICAgICAgICBwbGF5ZXJPYmplY3QucG9zaXRpb24uc2V0KDAsIHBsYXllck9iamVjdC5wb3NpdGlvbi55LCAwKTtcbiAgICAgICAgICAgIHBsYXllck9iamVjdC5yb3RhdGlvbi56ID0gMDtcbiAgICAgICAgICAgIHBsYXllck9iamVjdC5wb3NpdGlvbi5zZXQoMCwgcGxheWVyT2JqZWN0LnBvc2l0aW9uLnosIDApO1xuICAgICAgICAgICAgc3BlZWQgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3Jhc2goKSB7XG4gICAgICAgIHNwZWVkID0gMDtcbiAgICAgICAgLy8gYWNjZWxlcmF0aW9uID0gMDtcbiAgICAgICAgLy8gaWYgKGtleUNvZGVNYXBbZW5hYmxlZENvbnRyb2xzLnVwXSkge1xuICAgICAgICAvLyAgICAgcGxheWVyT2JqZWN0LnRyYW5zbGF0ZVooLXNwZWVkKTtcbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICAgIHBsYXllck9iamVjdC50cmFuc2xhdGVaKHNwZWVkKTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIGZvciAodmFyIGkgPSBncm91cEJsb2Nrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAvLyBsZXQgcG9zID0gZ3JvdXBCbG9ja3NbaV0ucG9zaXRpb247XG4gICAgICAgIC8vICAgICBsZXQgcG8gPSBwbGF5ZXJPYmplY3QuY2hpbGRyZW5bMl0uY2hpbGRyZW5bMF1cbiAgICAgICAgLy8gZm9yICh2YXIgdmVydGV4SW5kZXggPSAwOyB2ZXJ0ZXhJbmRleCA8IHBvLmdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDsgdmVydGV4SW5kZXgrKylcbiAgICAgICAgLy8ge1xuICAgICAgICAvLyAgICAgdmFyIGxvY2FsVmVydGV4ID0gcG8uZ2VvbWV0cnkudmVydGljZXNbdmVydGV4SW5kZXhdLmNsb25lKCk7XG4gICAgICAgIC8vICAgICB2YXIgZ2xvYmFsVmVydGV4ID0gbG9jYWxWZXJ0ZXguYXBwbHlNYXRyaXhwbGF5ZXJPYmplY3QubWF0cml4Lm11bHRpcGx5VmVjdG9yMygpO1xuICAgICAgICAvLyAgICAgdmFyIGRpcmVjdGlvblZlY3RvciA9IGdsb2JhbFZlcnRleC5zdWJTZWxmKCBwby5wb3NpdGlvbiApO1xuXG4gICAgICAgIC8vICAgICB2YXIgcmF5ID0gbmV3IFRIUkVFLlJheSggcG8ucG9zaXRpb24sIGRpcmVjdGlvblZlY3Rvci5jbG9uZSgpLm5vcm1hbGl6ZSgpICk7XG4gICAgICAgIC8vICAgICB2YXIgY29sbGlzaW9uUmVzdWx0cyA9IHJheS5pbnRlcnNlY3RPYmplY3RzKCBncm91cEJsb2NrcyApO1xuICAgICAgICAvLyAgICAgaWYgKCBjb2xsaXNpb25SZXN1bHRzLmxlbmd0aCA+IDAgJiYgY29sbGlzaW9uUmVzdWx0c1swXS5kaXN0YW5jZSA8IGRpcmVjdGlvblZlY3Rvci5sZW5ndGgoKSApXG4gICAgICAgIC8vICAgICB7XG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ3BlcmRpc3RyZScpXG4gICAgICAgIC8vICAgICAgICAgLy8gYSBjb2xsaXNpb24gb2NjdXJyZWQuLi4gZG8gc29tZXRoaW5nLi4uXG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gaWYoKHBsYXllck9iamVjdC5wb3NpdGlvbi54KzUgPCBwb3MueCAmJiBwbGF5ZXJPYmplY3QucG9zaXRpb24ueis1IDwgcG9zLnopfHwgKHBsYXllck9iamVjdC5wb3NpdGlvbi54LTUgPiBwb3MueCAmJiBwbGF5ZXJPYmplY3QucG9zaXRpb24ueis1ID4gcG9zLnopKVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhncm91cEJsb2Nrc1tpXSlcbiAgICAgICAgLy8gfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VQbGF5ZXJPYmplY3QoKSB7XG4gICAgICAgIGNvbnN0IGxvYWRlciA9IG5ldyBUSFJFRS5PYmplY3RMb2FkZXIoKTtcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0gbG9hZGVyLnBhcnNlKHBsYXllckNhcik7XG5cbiAgICAgICAgcG92Q2FtZXJhLnBvc2l0aW9uLnkgPSBvYmplY3Quc2NhbGUueSAqIDI7XG4gICAgICAgIHBvdkNhbWVyYS5wb3NpdGlvbi56ID0gb2JqZWN0LnNjYWxlLnogKiA0O1xuICAgICAgICAvLyB0cmFja2luZ0NhbWVyYS5yb3RhdGVYKDAgKiBNYXRoLlBJIC8gMTgwKTtcbiAgICAgICAgcG92Q2FtZXJhLnJvdGF0ZVkoMTgwICogTWF0aC5QSSAvIDE4MCk7XG5cbiAgICAgICAgdHJhY2tpbmdDYW1lcmEucG9zaXRpb24ueSA9IG9iamVjdC5zY2FsZS55ICogMTA7XG4gICAgICAgIHRyYWNraW5nQ2FtZXJhLnBvc2l0aW9uLnogPSBvYmplY3Quc2NhbGUueiAqIC0yMDtcbiAgICAgICAgLy8gdHJhY2tpbmdDYW1lcmEucm90YXRlWCgwICogTWF0aC5QSSAvIDE4MCk7XG4gICAgICAgIHRyYWNraW5nQ2FtZXJhLnJvdGF0ZVkoMTgwICogTWF0aC5QSSAvIDE4MCk7XG5cbiAgICAgICAgb2JqZWN0LmFkZChwb3ZDYW1lcmEpO1xuICAgICAgICBvYmplY3QuYWRkKHRyYWNraW5nQ2FtZXJhKTtcblxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvZ2dsZU1vdmVtZW50cyh2YWwpIHtcbiAgICAgICAgbW92ZW1lbnRMb2NrZWQgPSB2YWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZG9Nb3ZlbWVudExvb3A6IGRvTW92ZW1lbnRMb29wLFxuICAgICAgICBwbGF5ZXJPYmplY3Q6IHBsYXllck9iamVjdCxcbiAgICAgICAgZ2V0Q2FtZXJhOiBnZXRDYW1lcmEsXG4gICAgICAgIHBsYXllcklkOiBwbGF5ZXJJZCxcbiAgICAgICAgY3Jhc2g6IGNyYXNoLFxuICAgICAgICBsb2NrTW92ZW1lbnQ6IHRvZ2dsZU1vdmVtZW50c1xuICAgIH07XG59KSgpO1xuIiwiLyoqXG4gKiBNYWluIGZpbGUgb2YgdGhlIGdhbWUuXG4gKi9cblxuY29uc3QgTm90TWFyaW9LYXJ0ID0gKGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcigpO1xuICAgIGNvbnN0IG1pbmlNYXBSZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCk7XG4gICAgY29uc3QgbWluaU1hcENhbWVyYSA9IG5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEoXG4gICAgICAgIC1XSU5ET1dfV0lEVEggLyBNSU5JQ0FNX0ZBQ1RPUixcbiAgICAgICAgV0lORE9XX1dJRFRIIC8gTUlOSUNBTV9GQUNUT1IsXG4gICAgICAgIFdJTkRPV19IRUlHSFQgLyBNSU5JQ0FNX0ZBQ1RPUixcbiAgICAgICAgLVdJTkRPV19IRUlHSFQgLyBNSU5JQ0FNX0ZBQ1RPUixcbiAgICAgICAgVE9QX0NBTUVSQV9ESVNUIC0gNTAsXG4gICAgICAgIFRPUF9DQU1FUkFfRElTVCArIDUwXG4gICAgKTtcbiAgICB2YXIgZmxvb3I7XG4gICAgLy9Cb3ggb2JqZWN0c1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgdmFyIGNoZWNrcG9pbnRzID0gW107XG4gICAgY29uc3QgcGxheWVycyA9IHt9O1xuICAgIC8vQm94IHBvc2l0aW9ucyBmb3Igb3RoZXIgcGxheWVyc1xuICAgIHZhciBib3hlcyA9IFtdO1xuICAgIHZhciBsYXAgPSAwO1xuICAgIHZhciBjaGVja0xhcENvdW50ID0gMDtcbiAgICB2YXIgY3VycmVudENoZWNrcG9pbnQ7XG4gICAgdmFyIGxhc3RDaGVja3BvaW50ID0gMDtcbiAgICB2YXIgb3RoZXJQbGF5ZXJzTW9kYWw7XG4gICAgdmFyIHNvY2tldDtcbiAgICB2YXIgd2FpdGluZ01vZGFsO1xuXG4gICAgZnVuY3Rpb24gaW5pdFNvY2tldEV2ZW50KCkge1xuICAgICAgICBzb2NrZXQgPSBpbyh7IHRyYW5zcG9ydHM6IFsnd2Vic29ja2V0J10sIHVwZ3JhZGU6IGZhbHNlIH0pO1xuXG4gICAgICAgIHZhciBtb2RhbCA9IHBpY29Nb2RhbCh7XG4gICAgICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgICAgICdQbGVhc2UgZW50ZXIgYSBuYW1lOiA8aW5wdXQgaWQ9XCJwbGF5ZXJOYW1lXCIvPjxici8+PGJ1dHRvbiBpZD1cInBsYXllck5hbWVCdG5cIj5TdGFydCE8L2J1dHRvbj4nLFxuICAgICAgICAgICAgY2xvc2VCdXR0b246IGZhbHNlLFxuICAgICAgICAgICAgb3ZlcmxheUNsb3NlOiBmYWxzZVxuICAgICAgICB9KS5zaG93KCk7XG5cbiAgICAgICAgJCgnI3BsYXllck5hbWVCdG4nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdwbGF5ZXItcmVhZHknLCAkKCcjcGxheWVyTmFtZScpLnZhbCgpKTtcbiAgICAgICAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICB3YWl0aW5nTW9kYWwgPSBwaWNvTW9kYWwoe1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdXYWl0aW5nIGZvciBvdGhlciBwbGF5ZXJzLi4uJyxcbiAgICAgICAgICAgICAgICBjbG9zZUJ1dHRvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgb3ZlcmxheUNsb3NlOiBmYWxzZVxuICAgICAgICAgICAgfSkuc2hvdygpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzb2NrZXQub24oJ2FsbC1wbGF5ZXJzJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1thbGwtcGxheWVyc10nLCBkYXRhKTtcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSBwbGF5ZXIucG9zaXRpb247XG4gICAgICAgICAgICAgICAgY29uc3Qgcm90ID0gcGxheWVyLnJvdGF0aW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhciA9IG1ha2VDYXJPYmplY3QoKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXJzW3BsYXllci5pZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3MsXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiByb3QsXG4gICAgICAgICAgICAgICAgICAgIGNhcjogY2FyXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjYXIucG9zaXRpb24uc2V0KHBvcy54LCBwb3MueSwgcG9zLnopO1xuICAgICAgICAgICAgICAgIGNhci5yb3RhdGlvbi5zZXQocm90LngsIHJvdC55LCByb3Queik7XG4gICAgICAgICAgICAgICAgc2NlbmUuYWRkKGNhcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmKGRhdGEubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgICAgIGFkZEJveGVzKCk7XG4gICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoJ3NlbmQtYm94ZXMnLCBib3hlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNvY2tldC5vbigncGxheWVyLWpvaW5lZCcsIGZ1bmN0aW9uKHBsYXllcikge1xuICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoYHBsYXllciAke3BsYXllci5pZH0gaGFzIGpvaW5lZC5gKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbcGxheWVyLWpvaW5lZF0nLCBwbGF5ZXIpO1xuICAgICAgICAgICAgY29uc3QgcG9zID0gcGxheWVyLnBvc2l0aW9uO1xuICAgICAgICAgICAgY29uc3Qgcm90ID0gcGxheWVyLnJvdGF0aW9uO1xuICAgICAgICAgICAgY29uc3QgY2FyID0gbWFrZUNhck9iamVjdCgpO1xuICAgICAgICAgICAgcGxheWVyc1twbGF5ZXIuaWRdID0ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3MsXG4gICAgICAgICAgICAgICAgcm90YXRpb246IHJvdCxcbiAgICAgICAgICAgICAgICBjYXI6IGNhclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhci5wb3NpdGlvbi5zZXQocG9zLngsIHBvcy55LCBwb3Mueik7XG4gICAgICAgICAgICBjYXIucm90YXRpb24uc2V0KHJvdC54LCByb3QueSwgcm90LnopO1xuICAgICAgICAgICAgc2NlbmUuYWRkKGNhcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNvY2tldC5vbigncmVjZWl2ZS1ib3hlcycsIGZ1bmN0aW9uKGJveHMpIHtcbiAgICAgICAgICAgIGJveGVzID0gYm94cztcbiAgICAgICAgICAgIGFkZEJveGVzUG9zaXRpb24oKTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvLyBzb2NrZXQub24oJ3BsYXllci1sYXAnLCBmdW5jdGlvbigpe1xuXG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIHNvY2tldC5vbigncGxheWVyLWxlZnQnLCBmdW5jdGlvbihwbGF5ZXJJZCkge1xuICAgICAgICAgICAgdG9hc3RyLmVycm9yKGBQbGF5ZXIgJHtwbGF5ZXJJZH0gaGFzIGxlZnQuYCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3BsYXllci1sZWZ0XScsIHBsYXllcklkKTtcbiAgICAgICAgICAgIGNvbnN0IGNhciA9IHBsYXllcnNbcGxheWVySWRdLmNhcjtcbiAgICAgICAgICAgIHNjZW5lLnJlbW92ZShjYXIpO1xuICAgICAgICAgICAgZGVsZXRlIHBsYXllcnNbcGxheWVySWRdO1xuICAgICAgICB9KTtcblxuICAgICAgICBzb2NrZXQub24oJ3VwZGF0ZS1wbGF5ZXInLCBmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbdXBkYXRlLXBsYXllcl0nLCBwbGF5ZXIpO1xuICAgICAgICAgICAgY29uc3QgaWQgPSBwbGF5ZXIuaWQ7XG4gICAgICAgICAgICBjb25zdCBwb3MgPSBwbGF5ZXIucG9zaXRpb247XG4gICAgICAgICAgICBjb25zdCByb3QgPSBwbGF5ZXIucm90YXRpb247XG4gICAgICAgICAgICBjb25zdCBwID0gcGxheWVyc1tpZF07XG4gICAgICAgICAgICBwLmNhci5wb3NpdGlvbi5zZXQocG9zLngsIHBvcy55LCBwb3Mueik7XG4gICAgICAgICAgICBwLmNhci5yb3RhdGlvbi5zZXQocm90LngsIHJvdC55LCByb3Queik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNvY2tldC5vbignc3RhcnQtcmFjZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgd2FpdGluZ01vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICBsZXQgc2Vjb25kcyA9IDM7XG4gICAgICAgICAgICAoZnVuY3Rpb24gbW92ZShzZWNvbmRzKSB7XG4gICAgICAgICAgICAgICAgaWYoc2Vjb25kcyA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNlY29uZHMgPT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuaW5mbygnR08hJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBQbGF5ZXIubG9ja01vdmVtZW50KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmluZm8oc2Vjb25kcysnIHNlY29uZHMgYmVmb3JlIHRoZSByYWNlIHN0YXJ0cy4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KG1vdmUsIDEwMDAsIHNlY29uZHMtMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoc2Vjb25kcyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNvY2tldC5vbigncmFjZS1vdmVyJywgZnVuY3Rpb24odGltZSkge1xuICAgICAgICAgICAgcGljb01vZGFsKHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnWW91IGxvc3QnLFxuICAgICAgICAgICAgICAgIGNsb3NlQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIG92ZXJsYXlDbG9zZTogZmFsc2VcbiAgICAgICAgICAgIH0pLnNob3coKTtcbiAgICAgICAgICAgIFBsYXllci5sb2NrTW92ZW1lbnQodHJ1ZSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBzaG93IG1vZGFsIFwid2FpdGluZyBmb3Igb3RoZXJzLCB5b3VyIHRpbWUgaXMgeFwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNvY2tldC5vbignZmluaXNoZWQnLCBmdW5jdGlvbih0aW1lKSB7XG4gICAgICAgICAgICB0b2FzdHIuaW5mbygnWW91IGZpbmlzaGVkLicpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tmaW5pc2hlZF0nLCB0aW1lKTtcbiAgICAgICAgICAgIC8vIFRPRE86IHNob3cgbW9kYWwgXCJ3YWl0aW5nIGZvciBvdGhlcnMsIHlvdXIgdGltZSBpcyB4XCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc29ja2V0Lm9uKCdzdG9wJywgZnVuY3Rpb24ocGxheWVycykge1xuICAgICAgICAgICAgdG9hc3Rlci5pbmZvKCdUaGUgcmFjZSBpcyBvdmVyLicpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tzdG9wXScsIHN0b3ApO1xuICAgICAgICAgICAgLy8gVE9ETzogYWxsIHBsYXllcnMgYXJlIGZpbmlzaGVkLCBzaG93IHJhbmtpbmcgYW5kIHBsYXkgYWdhaW4gYnV0dG9uXG4gICAgICAgICAgICBwbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgLy8gc29ydGVkIGJ5IHJhbmtpbmcgOi0pXG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHBsYXllci5uYW1lO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWUgPSB0aW1lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNvY2tldC5vbignc3BlY3RhdG9yJywgZnVuY3Rpb24ocGxheWVycykge1xuICAgICAgICAgICAgdG9hc3Rlci5pbmZvKCdZb3UgYXJlIG5vdCBhIHBsYXllciwgcmFjZSBmdWxsJyk7XG4gICAgICAgIH0pO1xuXG5cblxuICAgICAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gUGxheWVyLnBsYXllck9iamVjdDtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCd1cGRhdGUtcGxheWVyJywge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHAucG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICAgICAgeTogcC5wb3NpdGlvbi55LFxuICAgICAgICAgICAgICAgICAgICB6OiBwLnBvc2l0aW9uLnpcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHAucm90YXRpb24uX3gsXG4gICAgICAgICAgICAgICAgICAgIHk6IHAucm90YXRpb24uX3ksXG4gICAgICAgICAgICAgICAgICAgIHo6IHAucm90YXRpb24uX3pcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMTAwMCAvIDI1KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlQ2FyT2JqZWN0KCkge1xuICAgICAgICBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuT2JqZWN0TG9hZGVyKCk7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IGxvYWRlci5wYXJzZShwbGF5ZXJDYXIpO1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkRmxvb3IoKSB7XG4gICAgICAgIGxldCBjdXJ2ZSA9IG5ldyBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzKFtcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApLFxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMCwgNTAwLCAwKSxcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKC0yMDAsIDUwMCwgMCksXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygtMjAwLCA4MDAsIDApLFxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoNjAwLCA4MDAsIDApLFxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoNjAwLCA1MDAsIDApLFxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMzAwLCA1MDAsIDApLFxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMzAwLCAwLCAwKSxcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDgwMCwgMCwgMCksXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMyg4MDAsIC01MDAsIDApLFxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMCwgLTUwMCwgMClcbiAgICAgICAgXSk7XG4gICAgICAgIGN1cnZlLmNsb3NlZCA9IHRydWU7XG5cbiAgICAgICAgbGV0IGV4dHJ1ZGVTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIHN0ZXBzOiAxMDAsXG4gICAgICAgICAgICBleHRydWRlUGF0aDogY3VydmVcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBTaGFwZSB0aGF0IGdldHMgZXh0cnVkZWQgdGhyb3VnaCB0aGUgY3VydmVcbiAgICAgICAgbGV0IHNoYXBlID0gbmV3IFRIUkVFLlNoYXBlKFtcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IyKDIgKiBDQVJfU0laRV9ZLCAwKSxcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IyKDAsIDUgKiBDQVJfU0laRV9YKSxcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IyKDAsIC01ICogQ0FSX1NJWkVfWClcbiAgICAgICAgXSk7XG5cbiAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkV4dHJ1ZGVHZW9tZXRyeShzaGFwZSwgZXh0cnVkZVNldHRpbmdzKTtcblxuICAgICAgICBsZXQgbWF0ZXJpYWxzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTlVNQkVSX0NPTE9SUzsgaSsrKSB7XG4gICAgICAgICAgICBtYXRlcmlhbHMucHVzaChcbiAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogUk9BRF9DT0xPUlNbaV0sXG4gICAgICAgICAgICAgICAgICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGVcbiAgICAgICAgICAgICAgICAgICAgLy93aXJlZnJhbWU6IHRydWUgLy8gVGhpcyBtYWtlcyB0cmFjayBtb3JlIFRyb24tbGlrZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdlb0ZhY2VzTGVuZ3RoID0gZ2VvbWV0cnkuZmFjZXMubGVuZ3RoIC8gMjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnZW9GYWNlc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaiA9IGkgKiAyOyAvLyA8LS0gQWRkZWQgdGhpcyBiYWNrIHNvIHdlIGNhbiBkbyBldmVyeSBvdGhlciAnZmFjZSdcblxuICAgICAgICAgICAgZ2VvbWV0cnkuZmFjZXNbal0ubWF0ZXJpYWxJbmRleCA9XG4gICAgICAgICAgICAgICAgKGkgKyBNYXRoLmZsb29yKGkgLyBXT1JMRF9TSURFX1NJWkUpKSAlIE5VTUJFUl9DT0xPUlM7XG5cbiAgICAgICAgICAgIGdlb21ldHJ5LmZhY2VzW2ogKyAxXS5tYXRlcmlhbEluZGV4ID1cbiAgICAgICAgICAgICAgICAoaSArIE1hdGguZmxvb3IoaSAvIFdPUkxEX1NJREVfU0laRSkpICUgTlVNQkVSX0NPTE9SUzsgLy8gT3RoZXIgaGFsZiBvZiB0aGUgc2FtZSBmYWNlXG4gICAgICAgIH1cblxuICAgICAgICBmbG9vciA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbHMpO1xuICAgICAgICBmbG9vci5yb3RhdGVYKC1NYXRoLlBJIC8gMik7XG4gICAgICAgIGZsb29yLnBvc2l0aW9uLnkgPSAwO1xuXG4gICAgICAgIHNjZW5lLmFkZChmbG9vcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQ2hlY2twb2ludHMoKSB7XG4gICAgICAgIGxldCBjdXJ2ZVBvaW50cyA9IFtcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApLFxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMzAwLCAwLCA1ODApLFxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMjUwLCAwLCAtMjAwKSxcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKDIwMCwgMCwgLTg3MCksXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAtNTAwKVxuICAgICAgICBdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VydmVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGN1cnZlUG9pbnRzW2ldKTtcbiAgICAgICAgICAgIGxldCBjaGVjayA9IG5ldyBDaGVja3BvaW50KFxuICAgICAgICAgICAgICAgIGN1cnZlUG9pbnRzW2ldLngsXG4gICAgICAgICAgICAgICAgQk9YX1NJWkUgLyAyLFxuICAgICAgICAgICAgICAgIGN1cnZlUG9pbnRzW2ldLnpcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuICAgICAgICAgICAgLy8gaWYgKGkgIT0gY3VydmVQb2ludHMubGVuZ3RoLTEpIHtcbiAgICAgICAgICAgIGNoZWNrcG9pbnRzLnB1c2goY2hlY2spO1xuICAgICAgICAgICAgc2NlbmUuYWRkKGNoZWNrLm1lc2gpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQm94ZXMoKSB7XG4gICAgICAgIGxldCBtaW4gPSAtMjAwMDtcbiAgICAgICAgbGV0IG1heCA9IDIwMDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgcmFuZG9tIGJveC5cbiAgICAgICAgICAgIGxldCBib3ggPSBuZXcgQm94KFxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSArIG1pbiksXG4gICAgICAgICAgICAgICAgQk9YX1NJWkUgLyAyLFxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSArIG1pbilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAvLyBBZGQgb25seSBpZiBpdCdzIG92ZXIgdGhlIGZsb29yLlxuICAgICAgICAgICAgc2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcbiAgICAgICAgICAgIFBoeXNpY3MuZ3Jhdml0eShib3gubWVzaCwgZmxvb3IpO1xuICAgICAgICAgICAgaWYgKGJveC5tZXNoLnBvc2l0aW9uLnkgPT0gQk9YX1NJWkUgLyAyKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKGJveCk7XG4gICAgICAgICAgICAgICAgYm94ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHg6IGJveC5tZXNoLnBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgICAgIHo6IGJveC5tZXNoLnBvc2l0aW9uLnpcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzY2VuZS5hZGQoYm94Lm1lc2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQm94ZXNQb3NpdGlvbigpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHJhbmRvbSBib3guXG4gICAgICAgICAgICBsZXQgYm94ID0gbmV3IEJveChib3hlc1tpXS54LCBCT1hfU0laRSAvIDIsIGJveGVzW2ldLnopO1xuICAgICAgICAgICAgLy8gQWRkIG9ubHkgaWYgaXQncyBvdmVyIHRoZSBmbG9vci5cbiAgICAgICAgICAgIHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG4gICAgICAgICAgICBQaHlzaWNzLmdyYXZpdHkoYm94Lm1lc2gsIGZsb29yKTtcbiAgICAgICAgICAgIGlmIChib3gubWVzaC5wb3NpdGlvbi55ID09IEJPWF9TSVpFIC8gMikge1xuICAgICAgICAgICAgICAgIG9iamVjdHMucHVzaChib3gpO1xuICAgICAgICAgICAgICAgIHNjZW5lLmFkZChib3gubWVzaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0xhcCgpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDaGVja3BvaW50ID09IGxhc3RDaGVja3BvaW50ICsgMSkge1xuICAgICAgICAgICAgbGFzdENoZWNrcG9pbnQgPSBjdXJyZW50Q2hlY2twb2ludDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudENoZWNrcG9pbnQgPT0gMCAmJiBsYXN0Q2hlY2twb2ludCA9PSA0KSB7XG4gICAgICAgICAgICBsYXN0Q2hlY2twb2ludCA9IGN1cnJlbnRDaGVja3BvaW50O1xuICAgICAgICAgICAgbGFwID0gbGFwICsgMTtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdwbGF5ZXItbGFwJyxsYXApO1xuICAgICAgICAgICAgaWYobGFwID09IDIpe1xuICAgICAgICAgICAgICAgIFBsYXllci5sb2NrTW92ZW1lbnQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgcGljb01vZGFsKHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ1lvdSB3b24hJyxcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VCdXR0b246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG92ZXJsYXlDbG9zZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KS5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICByZW5kZXJlci5zZXRTaXplKFdJTkRPV19XSURUSCwgV0lORE9XX0hFSUdIVCk7XG4gICAgICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICByZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICAgICAgcmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG5cbiAgICAgICAgbWluaU1hcFJlbmRlcmVyLnNldFNpemUoV0lORE9XX1dJRFRIIC8gNCwgV0lORE9XX0hFSUdIVCAvIDQpO1xuICAgICAgICBtaW5pTWFwUmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIG1pbmlNYXBSZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgbWluaU1hcFJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUudG9wID0gJzUlJztcbiAgICAgICAgbWluaU1hcFJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUubGVmdCA9ICc3MCUnO1xuICAgICAgICBtaW5pTWFwUmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS56SW5kZXggPSAnMic7XG4gICAgICAgIG1pbmlNYXBSZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLm91dGxpbmUgPSAnd2hpdGUgc29saWQnO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1pbmlNYXBSZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICAgICAgbWluaU1hcFJlbmRlcmVyLmF1dG9DbGVhciA9IGZhbHNlO1xuXG4gICAgICAgIG1pbmlNYXBDYW1lcmEucG9zaXRpb24ueSA9IFRPUF9DQU1FUkFfRElTVDtcbiAgICAgICAgbWluaU1hcENhbWVyYS5yb3RhdGlvbi54ID0gLTkwICogTWF0aC5QSSAvIDE4MDtcblxuICAgICAgICBidWlsZEZsb29yKCk7XG4gICAgICAgIC8vIGFkZEJveGVzKCk7XG4gICAgICAgIGFkZENoZWNrcG9pbnRzKCk7XG5cbiAgICAgICAgc2NlbmUuYWRkKFBsYXllci5wbGF5ZXJPYmplY3QpO1xuICAgICAgICBpbml0U29ja2V0RXZlbnQoKTtcbiAgICAgICAgbG9vcCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcblxuICAgICAgICByZW5kZXJlci5jbGVhcigpO1xuICAgICAgICByZW5kZXJlci5zZXRWaWV3cG9ydCgwLCAwLCBXSU5ET1dfV0lEVEgsIFdJTkRPV19IRUlHSFQpO1xuICAgICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIFBsYXllci5nZXRDYW1lcmEoKSk7XG5cbiAgICAgICAgbWluaU1hcFJlbmRlcmVyLmNsZWFyKCk7XG4gICAgICAgIG1pbmlNYXBSZW5kZXJlci5zZXRWaWV3cG9ydCgwLCAwLCBXSU5ET1dfV0lEVEggLyA0LCBXSU5ET1dfSEVJR0hUIC8gNCk7XG4gICAgICAgIG1pbmlNYXBSZW5kZXJlci5yZW5kZXIoc2NlbmUsIG1pbmlNYXBDYW1lcmEpO1xuXG4gICAgICAgIC8vIGZvciAobGV0IGlkIGluIHBsYXllcnMpIHtcbiAgICAgICAgLy8gICAgIGNvbnN0IHAgPSBwbGF5ZXJzW2lkXTtcbiAgICAgICAgLy8gICAgIGNvbnN0IHBvcyA9IHAucG9zaXRpb247XG4gICAgICAgIC8vICAgICBjb25zdCByb3QgPSBwLnJvdGF0aW9uO1xuICAgICAgICAvLyAgICAgcC5jYXIucG9zaXRpb24uc2V0KHBvcy54LCBwb3MueSwgcG9zLnopO1xuICAgICAgICAvLyAgICAgcC5jYXIucm90YXRpb24uc2V0KHJvdC54LCByb3QueSwgcm90LnopO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgUGxheWVyLmRvTW92ZW1lbnRMb29wKCk7XG4gICAgICAgIGlmIChQaHlzaWNzLmRldGVjdENvbGxpc2lvbihQbGF5ZXIucGxheWVyT2JqZWN0LCBvYmplY3RzKSkge1xuICAgICAgICAgICAgUGxheWVyLmNyYXNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudENoZWNrcG9pbnQgPSBQaHlzaWNzLmNoZWNrUG9pbnRzKFxuICAgICAgICAgICAgUGxheWVyLnBsYXllck9iamVjdCxcbiAgICAgICAgICAgIGNoZWNrcG9pbnRzXG4gICAgICAgICk7XG4gICAgICAgIGlmIChjdXJyZW50Q2hlY2twb2ludCAhPSAtMSkge1xuICAgICAgICAgICAgaWYgKGNoZWNrTGFwQ291bnQgJSAxMCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tMYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrTGFwQ291bnQgKz0gMTtcbiAgICAgICAgICAgIGNoZWNrTGFwQ291bnQgPSBjaGVja0xhcENvdW50ICUgMTA7XG4gICAgICAgIH1cbiAgICAgICAgbWluaU1hcENhbWVyYS5wb3NpdGlvbi56ID0gUGxheWVyLnBsYXllck9iamVjdC5wb3NpdGlvbi56O1xuXG4gICAgICAgIFBoeXNpY3MuZ3Jhdml0eShQbGF5ZXIucGxheWVyT2JqZWN0LCBmbG9vcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogaW5pdFxuICAgIH07XG59KSgpO1xuIl19
