"use strict";var WORLD_SIDE_SIZE=7,WINDOW_HEIGHT=window.innerHeight,WINDOW_WIDTH=window.innerWidth,ROAD_COLORS=[16711680,16746496,16776960,65280,65535,255,16711935],NUMBER_COLORS=ROAD_COLORS.length,WORLD_HEIGHT=1e3,WORLD_WIDTH=100,TOP_CAMERA_DIST=50,CAR_SIZE_X=10,CAR_SIZE_Y=10,CAR_SIZE_Z=10,BOX_SIZE=10,Physics=function(){var e=-1,o=new THREE.Vector3(0,-TOP_CAMERA_DIST,0),t=new THREE.Vector3(0,1,0),n=new THREE.Raycaster;return{gravity:function(i,r){o.x=i.position.x,o.z=i.position.z,n.set(o,t),(!n.intersectObject(r,!0).length||i.position.y<0)&&(i.position.y+=e)},detectCollision:function(e,o){for(var t=(new THREE.Box3).setFromObject(e),n=0;n<o.length;n++)if(t.intersectsBox(o[n].boundingBox))return!0;return!1}}}(),Box=function(e,o,t){var n=new THREE.BoxGeometry(BOX_SIZE,BOX_SIZE,BOX_SIZE),i=new THREE.MeshBasicMaterial({color:11176004});this.mesh=new THREE.Mesh(n,i),this.mesh.position.x=e,this.mesh.position.y=o,this.mesh.position.z=t,this.boundingBox=(new THREE.Box3).setFromObject(this.mesh)},Player=function(){function e(e){e=e||event,d[e.which]="keydown"===e.type}var o=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),t=new THREE.PerspectiveCamera(75,WINDOW_WIDTH/WINDOW_HEIGHT,.1,1e3),n=t,i=function(){var e=(new THREE.ObjectLoader).parse(playerCar);return o.position.y=2*e.scale.y,o.position.z=4*e.scale.z,o.rotateY(180*Math.PI/180),t.position.y=10*e.scale.y,t.position.z=-20*e.scale.z,t.rotateY(180*Math.PI/180),e.add(o),e.add(t),e}(),r={movement:{arrows:{up:38,down:40,left:37,right:39},wasd:{up:87,down:83,left:65,right:68}},switchCamera:67,reset:8},a=r.movement.arrows,s=0,E=5,c=.05,l=.05,d={};return document.addEventListener("keydown",e,!1),document.addEventListener("keyup",e,!1),{doMovementLoop:function(){d[a.up]&&s<E&&(s+=c),d[a.left]&&i.rotateY(l),d[a.right]&&i.rotateY(-l),d[a.down]&&s>0&&(s-=c,s=Math.max(0,s)),i.translateZ(s),d[r.switchCamera]&&(n=n===o?t:o,d[r.switchCamera]=!1),d[r.reset]&&(i.rotation.x=0,i.position.set(0,i.position.x,0),i.rotation.y=0,i.position.set(0,i.position.y,0),i.rotation.z=0,i.position.set(0,i.position.z,0))},playerObject:i,getCamera:function(){return n},playerId:null,crash:function(){s=0}}}(),NotMarioKart=function(){function e(){var e=io({transports:["websocket"],upgrade:!1});e.on("all-players",function(t){console.log("[all-players]",t),t.forEach(function(e){var t=e.position,n=e.rotation,i=o();p[e.id]={position:t,rotation:n,car:i},i.position.set(t.x,t.y,t.z),i.rotation.set(n.x,n.y,n.z),s.add(i)}),console.log(t),0==t.length&&(n(),e.emit("send-boxes",y))}),e.on("player-joined",function(e){console.log("[player-joined]",e);var t=e.position,n=e.rotation,i=o();p[e.id]={position:t,rotation:n,car:i},i.position.set(t.x,t.y,t.z),i.rotation.set(n.x,n.y,n.z),s.add(i)}),e.on("receive-boxes",function(e){y=e,i()}),e.on("player-left",function(e){console.log("[player-left]",e);var o=p[e].car;s.remove(o),delete p[e]}),e.on("update-player",function(e){console.log("[update-player]",e);var o=e.id,t=e.position,n=e.rotation,i=p[o];i.car.position.set(t.x,t.y,t.z),i.car.rotation.set(n.x,n.y,n.z)}),e.on("start-countdown",function(e){console.log("[start-countdown]",e)}),e.on("start",function(){console.log("[start]")}),e.on("finished",function(e){console.log("[finished]",e)}),e.on("stop",function(e){console.log("[stop]",stop),e.forEach(function(e){e.name})}),window.setInterval(function(){var o=Player.playerObject;e.emit("update-player",{position:{x:o.position.x,y:o.position.y,z:o.position.z},rotation:{x:o.rotation._x,y:o.rotation._y,z:o.rotation._z}})},40)}function o(){return(new THREE.ObjectLoader).parse(playerCar)}function t(){var e=new THREE.CatmullRomCurve3([new THREE.Vector3(0,0,0),new THREE.Vector3(0,500,0),new THREE.Vector3(-200,500,0),new THREE.Vector3(-200,800,0),new THREE.Vector3(600,800,0),new THREE.Vector3(600,500,0),new THREE.Vector3(300,500,0),new THREE.Vector3(300,0,0),new THREE.Vector3(800,0,0),new THREE.Vector3(800,-500,0),new THREE.Vector3(0,-500,0)]);e.closed=!0;for(var o={steps:100,extrudePath:e},t=new THREE.Shape([new THREE.Vector2(2*CAR_SIZE_Y,0),new THREE.Vector2(0,5*CAR_SIZE_X),new THREE.Vector2(0,-5*CAR_SIZE_X)]),n=new THREE.ExtrudeGeometry(t,o),i=[],r=0;r<NUMBER_COLORS;r++)i.push(new THREE.MeshBasicMaterial({color:ROAD_COLORS[r],side:THREE.DoubleSide}));for(var E=n.faces.length/2,c=0;c<E;c++){var l=2*c;n.faces[l].materialIndex=(c+Math.floor(c/WORLD_SIDE_SIZE))%NUMBER_COLORS,n.faces[l+1].materialIndex=(c+Math.floor(c/WORLD_SIDE_SIZE))%NUMBER_COLORS}(a=new THREE.Mesh(n,i)).rotateX(-Math.PI/2),a.position.y=0,s.add(a)}function n(){for(var e=0;e<1e3;e++){var o=new Box(Math.floor(4001*Math.random()-2e3),BOX_SIZE/2,Math.floor(4001*Math.random()-2e3));s.updateMatrixWorld(),Physics.gravity(o.mesh,a),o.mesh.position.y==BOX_SIZE/2&&(d.push(o),y.push({x:o.mesh.position.x,z:o.mesh.position.z}),s.add(o.mesh))}}function i(){for(var e=0;e<y.length;e++){var o=new Box(y[e].x,BOX_SIZE/2,y[e].z);s.updateMatrixWorld(),Physics.gravity(o.mesh,a),o.mesh.position.y==BOX_SIZE/2&&(d.push(o),s.add(o.mesh))}}function r(){requestAnimationFrame(r),E.clear(),E.setViewport(0,0,WINDOW_WIDTH,WINDOW_HEIGHT),E.render(s,Player.getCamera()),c.clear(),c.setViewport(0,0,WINDOW_WIDTH/4,WINDOW_HEIGHT/4),c.render(s,l),Player.doMovementLoop(),Physics.detectCollision(Player.playerObject,d)&&Player.crash(),l.position.z=Player.playerObject.position.z,Physics.gravity(Player.playerObject,a)}var a,s=new THREE.Scene,E=new THREE.WebGLRenderer,c=new THREE.WebGLRenderer,l=new THREE.OrthographicCamera(-WINDOW_WIDTH,WINDOW_WIDTH,WINDOW_HEIGHT,-WINDOW_HEIGHT,TOP_CAMERA_DIST-50,TOP_CAMERA_DIST+50),d=[],p={},y=[];return{init:function(){E.setSize(WINDOW_WIDTH,WINDOW_HEIGHT),E.setPixelRatio(window.devicePixelRatio),E.domElement.style.position="fixed",document.body.appendChild(E.domElement),E.autoClear=!1,c.setSize(WINDOW_WIDTH/4,WINDOW_HEIGHT/4),c.setPixelRatio(window.devicePixelRatio),c.domElement.style.position="fixed",c.domElement.style.top="5%",c.domElement.style.left="70%",c.domElement.style.zIndex="2",c.domElement.style.outline="white solid",document.body.appendChild(c.domElement),c.autoClear=!1,l.position.y=TOP_CAMERA_DIST,l.rotation.x=-90*Math.PI/180,t(),s.add(Player.playerObject),e(),r()}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
